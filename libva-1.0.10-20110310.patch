diff --git a/i965_drv_video/gen6_mfd.c b/i965_drv_video/gen6_mfd.c
index 0265687..3b178c2 100644
--- a/i965_drv_video/gen6_mfd.c
+++ b/i965_drv_video/gen6_mfd.c
@@ -85,10 +85,10 @@ gen6_mfd_avc_frame_store_index(VADriverContextP ctx, VAPictureParameterBufferH26
             struct object_surface *obj_surface = SURFACE(gen6_mfd_context->reference_surface[i].surface_id);
             obj_surface->flags &= ~SURFACE_REFERENCED;
 
-            if (obj_surface->flags & SURFACE_DISPLAYED) {
+            if ((obj_surface->flags & SURFACE_ALL_MASK) == SURFACE_DISPLAYED) {
                 dri_bo_unreference(obj_surface->bo);
                 obj_surface->bo = NULL;
-                obj_surface->flags = 0;
+                obj_surface->flags &= ~SURFACE_REF_DIS_MASK;
             }
 
             if (obj_surface->free_private_data)
@@ -1039,7 +1039,8 @@ gen6_mfd_avc_decode_init(VADriverContextP ctx, struct decode_state *decode_state
     assert(!(va_pic->flags & VA_PICTURE_H264_INVALID));
     obj_surface = SURFACE(va_pic->picture_id);
     assert(obj_surface);
-    obj_surface->flags = (pic_param->pic_fields.bits.reference_pic_flag ? SURFACE_REFERENCED : 0);
+    obj_surface->flags &= ~SURFACE_REF_DIS_MASK;
+    obj_surface->flags |= (pic_param->pic_fields.bits.reference_pic_flag ? SURFACE_REFERENCED : 0);
     gen6_mfd_init_avc_surface(ctx, pic_param, obj_surface);
 
     if (obj_surface->bo == NULL) {
diff --git a/i965_drv_video/i965_avc_bsd.c b/i965_drv_video/i965_avc_bsd.c
index 0976439..89bd169 100644
--- a/i965_drv_video/i965_avc_bsd.c
+++ b/i965_drv_video/i965_avc_bsd.c
@@ -507,7 +507,8 @@ i965_avc_bsd_buf_base_state(VADriverContextP ctx,
     assert(!(va_pic->flags & VA_PICTURE_H264_INVALID));
     obj_surface = SURFACE(va_pic->picture_id);
     assert(obj_surface);
-    obj_surface->flags = (pic_param->pic_fields.bits.reference_pic_flag ? SURFACE_REFERENCED : 0);
+    obj_surface->flags &= ~SURFACE_REF_DIS_MASK;
+    obj_surface->flags |= (pic_param->pic_fields.bits.reference_pic_flag ? SURFACE_REFERENCED : 0);
     i965_avc_bsd_init_avc_bsd_surface(ctx, obj_surface, pic_param);
     avc_bsd_surface = obj_surface->private_data;
 
@@ -922,10 +923,10 @@ i965_avc_bsd_frame_store_index(VADriverContextP ctx,
             struct object_surface *obj_surface = SURFACE(i965_h264_context->fsid_list[i].surface_id);
             obj_surface->flags &= ~SURFACE_REFERENCED;
 
-            if (obj_surface->flags & SURFACE_DISPLAYED) {
+            if ((obj_surface->flags & SURFACE_ALL_MASK) == SURFACE_DISPLAYED) {
                 dri_bo_unreference(obj_surface->bo);
                 obj_surface->bo = NULL;
-                obj_surface->flags = 0;
+                obj_surface->flags &= ~SURFACE_REF_DIS_MASK;
             }
 
             if (obj_surface->free_private_data)
diff --git a/i965_drv_video/i965_defines.h b/i965_drv_video/i965_defines.h
index b03dc00..3285b79 100644
--- a/i965_drv_video/i965_defines.h
+++ b/i965_drv_video/i965_defines.h
@@ -27,6 +27,13 @@
 #define CMD_BSD_IND_OBJ_BASE_ADDR               CMD(2, 4, 4)
 #define CMD_AVC_BSD_OBJECT                      CMD(2, 4, 8)
 
+#define CMD_MEDIA_VFE_STATE                     CMD(2, 0, 0)
+#define CMD_MEDIA_CURBE_LOAD                    CMD(2, 0, 1)
+#define CMD_MEDIA_INTERFACE_DESCRIPTOR_LOAD     CMD(2, 0, 2)
+#define CMD_MEDIA_GATEWAY_STATE                 CMD(2, 0, 3)
+#define CMD_MEDIA_STATE_FLUSH                   CMD(2, 0, 4)
+#define CMD_MEDIA_OBJECT_WALKER                 CMD(2, 1, 3)
+
 #define CMD_PIPELINED_POINTERS                  CMD(3, 0, 0)
 #define CMD_BINDING_TABLE_POINTERS              CMD(3, 0, 1)
 # define GEN6_BINDING_TABLE_MODIFY_PS           (1 << 12)/* for GEN6 */
diff --git a/i965_drv_video/i965_drv_video.c b/i965_drv_video/i965_drv_video.c
index 303e090..2fc2378 100644
--- a/i965_drv_video/i965_drv_video.c
+++ b/i965_drv_video/i965_drv_video.c
@@ -49,13 +49,17 @@
 #define IMAGE_ID_OFFSET                 0x0a000000
 #define SUBPIC_ID_OFFSET                0x10000000
 
-#define HAS_VC1(ctx)    (IS_GEN6((ctx)->intel.device_id))
+#define HAS_MPEG2(ctx)  (IS_G4X((ctx)->intel.device_id) || \
+                         IS_IRONLAKE((ctx)->intel.device_id) ||         \
+                         (IS_GEN6((ctx)->intel.device_id) && (ctx)->intel.has_bsd))
 
-/* Defined to 1 if GPU supports H.264 decoding */
-/* XXX: drop IS_IRONLAKE(ctx) check once G4X support is available */
-#define HAS_H264(ctx)   (IS_GEN6((ctx)->intel.device_id) || \
-                         (IS_IRONLAKE((ctx)->intel.device_id) && \
-                          (ctx)->intel.has_bsd))
+#define HAS_H264(ctx)   ((IS_GEN6((ctx)->intel.device_id) ||            \
+                          IS_IRONLAKE((ctx)->intel.device_id)) &&       \
+                          (ctx)->intel.has_bsd)
+
+#define HAS_VC1(ctx)    (IS_GEN6((ctx)->intel.device_id) && (ctx)->intel.has_bsd)
+
+#define HAS_TILED_SURFACE(ctx) (IS_GEN6((ctx)->intel.device_id))
 
 enum {
     I965_SURFACETYPE_RGBA = 1,
@@ -131,8 +135,10 @@ i965_QueryConfigProfiles(VADriverContextP ctx,
     struct i965_driver_data * const i965 = i965_driver_data(ctx);
     int i = 0;
 
-    profile_list[i++] = VAProfileMPEG2Simple;
-    profile_list[i++] = VAProfileMPEG2Main;
+    if (HAS_MPEG2(i965)) {
+        profile_list[i++] = VAProfileMPEG2Simple;
+        profile_list[i++] = VAProfileMPEG2Main;
+    }
 
     if (HAS_H264(i965)) {
         profile_list[i++] = VAProfileH264Baseline;
@@ -165,7 +171,8 @@ i965_QueryConfigEntrypoints(VADriverContextP ctx,
     switch (profile) {
     case VAProfileMPEG2Simple:
     case VAProfileMPEG2Main:
-        entrypoint_list[n++] = VAEntrypointVLD;
+        if (HAS_MPEG2(i965))
+            entrypoint_list[n++] = VAEntrypointVLD;
         break;
 
     case VAProfileH264Baseline:
@@ -268,7 +275,7 @@ i965_CreateConfig(VADriverContextP ctx,
     switch (profile) {
     case VAProfileMPEG2Simple:
     case VAProfileMPEG2Main:
-        if (VAEntrypointVLD == entrypoint) {
+        if (HAS_MPEG2(i965) && VAEntrypointVLD == entrypoint) {
             vaStatus = VA_STATUS_SUCCESS;
         } else {
             vaStatus = VA_STATUS_ERROR_UNSUPPORTED_ENTRYPOINT;
@@ -838,14 +845,15 @@ i965_destroy_buffer(struct object_heap *heap, struct object_base *obj)
     object_heap_free(heap, obj);
 }
 
-VAStatus 
-i965_CreateBuffer(VADriverContextP ctx,
-                  VAContextID context,          /* in */
-                  VABufferType type,            /* in */
-                  unsigned int size,            /* in */
-                  unsigned int num_elements,    /* in */
-                  void *data,                   /* in */
-                  VABufferID *buf_id)           /* out */
+static VAStatus
+i965_create_buffer_internal(VADriverContextP ctx,
+                            VAContextID context,
+                            VABufferType type,
+                            unsigned int size,
+                            unsigned int num_elements,
+                            void *data,
+                            dri_bo *store_bo,
+                            VABufferID *buf_id)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
     struct object_buffer *obj_buffer = NULL;
@@ -887,7 +895,13 @@ i965_CreateBuffer(VADriverContextP ctx,
     assert(buffer_store);
     buffer_store->ref_count = 1;
 
-    if (type == VASliceDataBufferType || type == VAImageBufferType) {
+    if (store_bo != NULL) {
+        buffer_store->bo = store_bo;
+        dri_bo_reference(buffer_store->bo);
+        
+        if (data)
+            dri_bo_subdata(buffer_store->bo, 0, size * num_elements, data);
+    } else if (type == VASliceDataBufferType || type == VAImageBufferType) {
         buffer_store->bo = dri_bo_alloc(i965->intel.bufmgr, 
                                         "Buffer", 
                                         size * num_elements, 64);
@@ -911,6 +925,18 @@ i965_CreateBuffer(VADriverContextP ctx,
     return VA_STATUS_SUCCESS;
 }
 
+VAStatus 
+i965_CreateBuffer(VADriverContextP ctx,
+                  VAContextID context,          /* in */
+                  VABufferType type,            /* in */
+                  unsigned int size,            /* in */
+                  unsigned int num_elements,    /* in */
+                  void *data,                   /* in */
+                  VABufferID *buf_id)           /* out */
+{
+    return i965_create_buffer_internal(ctx, context, type, size, num_elements, data, NULL, buf_id);
+}
+
 
 VAStatus 
 i965_BufferSetNumElements(VADriverContextP ctx,
@@ -950,7 +976,15 @@ i965_MapBuffer(VADriverContextP ctx,
     assert(!(obj_buffer->buffer_store->bo && obj_buffer->buffer_store->buffer));
 
     if (NULL != obj_buffer->buffer_store->bo) {
-        dri_bo_map(obj_buffer->buffer_store->bo, 1);
+        unsigned int tiling, swizzle;
+
+        dri_bo_get_tiling(obj_buffer->buffer_store->bo, &tiling, &swizzle);
+
+        if (tiling != I915_TILING_NONE)
+            drm_intel_gem_bo_map_gtt(obj_buffer->buffer_store->bo);
+        else
+            dri_bo_map(obj_buffer->buffer_store->bo, 1);
+
         assert(obj_buffer->buffer_store->bo->virtual);
         *pbuf = obj_buffer->buffer_store->bo->virtual;
         vaStatus = VA_STATUS_SUCCESS;
@@ -974,7 +1008,15 @@ i965_UnmapBuffer(VADriverContextP ctx, VABufferID buf_id)
     assert(!(obj_buffer->buffer_store->bo && obj_buffer->buffer_store->buffer));
 
     if (NULL != obj_buffer->buffer_store->bo) {
-        dri_bo_unmap(obj_buffer->buffer_store->bo);
+        unsigned int tiling, swizzle;
+
+        dri_bo_get_tiling(obj_buffer->buffer_store->bo, &tiling, &swizzle);
+
+        if (tiling != I915_TILING_NONE)
+            drm_intel_gem_bo_unmap_gtt(obj_buffer->buffer_store->bo);
+        else
+            dri_bo_unmap(obj_buffer->buffer_store->bo);
+
         vaStatus = VA_STATUS_SUCCESS;
     } else if (NULL != obj_buffer->buffer_store->buffer) {
         /* Do nothing */
@@ -1236,6 +1278,18 @@ i965_QuerySurfaceStatus(VADriverContextP ctx,
     struct object_surface *obj_surface = SURFACE(render_target);
 
     assert(obj_surface);
+
+    /* Commit pending operations to the HW */
+    intel_batchbuffer_flush(ctx);
+
+    /* Usually GEM will handle synchronization with the graphics hardware */
+#if 0
+    if (obj_surface->bo) {
+        dri_bo_map(obj_surface->bo, 0);
+        dri_bo_unmap(obj_surface->bo);
+    }
+#endif
+    
     *status = obj_surface->status;
 
     return VA_STATUS_SUCCESS;
@@ -1315,6 +1369,9 @@ i965_Init(VADriverContextP ctx)
     if (i965_media_init(ctx) == False)
         return VA_STATUS_ERROR_UNKNOWN;
 
+    if (i965_post_processing_init(ctx) == False)
+        return VA_STATUS_ERROR_UNKNOWN;
+
     if (i965_render_init(ctx) == False)
         return VA_STATUS_ERROR_UNKNOWN;
 
@@ -1369,6 +1426,7 @@ i965_CreateImage(VADriverContextP ctx,
         return VA_STATUS_ERROR_ALLOCATION_FAILED;
     obj_image->bo         = NULL;
     obj_image->palette    = NULL;
+    obj_image->derived_surface = VA_INVALID_ID;
 
     VAImage * const image = &obj_image->image;
     image->image_id       = image_id;
@@ -1443,6 +1501,7 @@ i965_CreateImage(VADriverContextP ctx,
         goto error;
 
     obj_image->bo = BUFFER(image->buf)->buffer_store->bo;
+    dri_bo_reference(obj_image->bo);
 
     if (image->num_palette_entries > 0 && image->entry_bytes > 0) {
         obj_image->palette = malloc(image->num_palette_entries * sizeof(obj_image->palette));
@@ -1465,10 +1524,125 @@ error:
 
 VAStatus i965_DeriveImage(VADriverContextP ctx,
                           VASurfaceID surface,
-                          VAImage *image)        /* out */
+                          VAImage *out_image)        /* out */
 {
-    /* TODO */
-    return VA_STATUS_ERROR_OPERATION_FAILED;
+    struct i965_driver_data *i965 = i965_driver_data(ctx);
+    struct i965_render_state *render_state = &i965->render_state;
+    struct object_image *obj_image;
+    struct object_surface *obj_surface; 
+    VAImageID image_id;
+    unsigned int w_pitch, h_pitch;
+    unsigned int data_size;
+    VAStatus va_status;
+
+    out_image->image_id = VA_INVALID_ID;
+    obj_surface = SURFACE(surface);
+
+    if (!obj_surface)
+        return VA_STATUS_ERROR_INVALID_SURFACE;
+
+    w_pitch = obj_surface->width;
+    h_pitch = obj_surface->height;
+    data_size = obj_surface->orig_width * obj_surface->orig_height +
+        2 * (((obj_surface->orig_width + 1) / 2) * ((obj_surface->orig_height + 1) / 2));
+
+    image_id = NEW_IMAGE_ID();
+
+    if (image_id == VA_INVALID_ID)
+        return VA_STATUS_ERROR_ALLOCATION_FAILED;
+
+    obj_image = IMAGE(image_id);
+    
+    if (!obj_image)
+        return VA_STATUS_ERROR_ALLOCATION_FAILED;
+
+    obj_image->bo = NULL;
+    obj_image->palette = NULL;
+    obj_image->derived_surface = VA_INVALID_ID;
+
+    VAImage * const image = &obj_image->image;
+    
+    memset(image, 0, sizeof(*image));
+    image->image_id = image_id;
+    image->buf = VA_INVALID_ID;
+    image->num_palette_entries = 0;
+    image->entry_bytes = 0;
+    image->width = obj_surface->orig_width;
+    image->height = obj_surface->orig_height;
+    image->data_size = data_size;
+
+    if (render_state->interleaved_uv) {
+        image->format.fourcc = VA_FOURCC('N','V','1','2');
+        image->format.byte_order = VA_LSB_FIRST;
+        image->format.bits_per_pixel = 12;
+        image->num_planes = 2;
+        image->pitches[0] = w_pitch;
+        image->offsets[0] = 0;
+        image->pitches[1] = w_pitch;
+        image->offsets[1] = w_pitch * h_pitch;
+    } else {
+        image->format.fourcc = VA_FOURCC('Y','V','1','2');
+        image->format.byte_order = VA_LSB_FIRST;
+        image->format.bits_per_pixel = 12;
+        image->num_planes = 3;
+        image->pitches[0] = w_pitch;
+        image->offsets[0] = 0;
+        image->pitches[1] = w_pitch / 2;
+        image->offsets[1] = w_pitch * h_pitch;
+        image->pitches[2] = w_pitch / 2;
+        image->offsets[2] = w_pitch * h_pitch + (w_pitch / 2) * (h_pitch / 2);
+    }
+
+    if (obj_surface->bo == NULL) {
+        if (HAS_TILED_SURFACE(i965)) {
+        
+            uint32_t tiling_mode = I915_TILING_Y;
+            unsigned long pitch;
+
+            obj_surface->bo = drm_intel_bo_alloc_tiled(i965->intel.bufmgr, 
+                                                       "vaapi surface",
+                                                       obj_surface->width, 
+                                                       obj_surface->height + obj_surface->height / 2,
+                                                       1,
+                                                       &tiling_mode,
+                                                       &pitch,
+                                                       0);
+            assert(obj_surface->bo);
+            assert(tiling_mode == I915_TILING_Y);
+            assert(pitch == obj_surface->width);
+        } else {
+            obj_surface->bo = dri_bo_alloc(i965->intel.bufmgr,
+                                           "vaapi surface",
+                                           obj_surface->size,
+                                           0x1000);
+        }
+    }
+
+    assert(obj_surface->bo);
+    va_status = i965_create_buffer_internal(ctx, 0, VAImageBufferType,
+                                            obj_surface->size, 1, NULL, obj_surface->bo, &image->buf);
+    if (va_status != VA_STATUS_SUCCESS)
+        goto error;
+
+    obj_image->bo = BUFFER(image->buf)->buffer_store->bo;
+    dri_bo_reference(obj_image->bo);
+
+    if (image->num_palette_entries > 0 && image->entry_bytes > 0) {
+        obj_image->palette = malloc(image->num_palette_entries * sizeof(obj_image->palette));
+        if (!obj_image->palette) {
+            va_status = VA_STATUS_ERROR_ALLOCATION_FAILED;
+            goto error;
+        }
+    }
+
+    *out_image = *image;
+    obj_surface->flags |= SURFACE_DERIVED;
+
+    return VA_STATUS_SUCCESS;
+
+error:
+    i965_DestroyImage(ctx, image_id);
+    return va_status;
 }
 
 static void 
@@ -1483,10 +1657,14 @@ i965_DestroyImage(VADriverContextP ctx, VAImageID image)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
     struct object_image *obj_image = IMAGE(image); 
+    struct object_surface *obj_surface; 
 
     if (!obj_image)
         return VA_STATUS_SUCCESS;
 
+    dri_bo_unreference(obj_image->bo);
+    obj_image->bo = NULL;
+
     if (obj_image->image.buf != VA_INVALID_ID) {
         i965_DestroyBuffer(ctx, obj_image->image.buf);
         obj_image->image.buf = VA_INVALID_ID;
@@ -1497,6 +1675,12 @@ i965_DestroyImage(VADriverContextP ctx, VAImageID image)
         obj_image->palette = NULL;
     }
 
+    obj_surface = SURFACE(obj_image->derived_surface);
+
+    if (obj_surface) {
+        obj_surface->flags &= ~SURFACE_DERIVED;
+    }
+
     i965_destroy_image(&i965->image_heap, (struct object_base *)obj_image);
 	
     return VA_STATUS_SUCCESS;
@@ -1552,11 +1736,17 @@ get_image_i420(struct object_image *obj_image, uint8_t *image_data,
     const int Y = 0;
     const int U = obj_image->image.format.fourcc == VA_FOURCC_YV12 ? 2 : 1;
     const int V = obj_image->image.format.fourcc == VA_FOURCC_YV12 ? 1 : 2;
+    unsigned int tiling, swizzle;
 
     if (!obj_surface->bo)
         return;
 
-    dri_bo_map(obj_surface->bo, 0);
+    dri_bo_get_tiling(obj_surface->bo, &tiling, &swizzle);
+
+    if (tiling != I915_TILING_NONE)
+        drm_intel_gem_bo_map_gtt(obj_surface->bo);
+    else
+        dri_bo_map(obj_surface->bo, 0);
 
     if (!obj_surface->bo->virtual)
         return;
@@ -1591,7 +1781,10 @@ get_image_i420(struct object_image *obj_image, uint8_t *image_data,
                src[2], obj_surface->width / 2,
                rect->width / 2, rect->height / 2);
 
-    dri_bo_unmap(obj_surface->bo);
+    if (tiling != I915_TILING_NONE)
+        drm_intel_gem_bo_unmap_gtt(obj_surface->bo);
+    else
+        dri_bo_unmap(obj_surface->bo);
 }
 
 static void
@@ -1600,11 +1793,17 @@ get_image_nv12(struct object_image *obj_image, uint8_t *image_data,
                const VARectangle *rect)
 {
     uint8_t *dst[2], *src[2];
+    unsigned int tiling, swizzle;
 
     if (!obj_surface->bo)
         return;
 
-    dri_bo_map(obj_surface->bo, 0);
+    dri_bo_get_tiling(obj_surface->bo, &tiling, &swizzle);
+
+    if (tiling != I915_TILING_NONE)
+        drm_intel_gem_bo_map_gtt(obj_surface->bo);
+    else
+        dri_bo_map(obj_surface->bo, 0);
 
     if (!obj_surface->bo->virtual)
         return;
@@ -1629,7 +1828,10 @@ get_image_nv12(struct object_image *obj_image, uint8_t *image_data,
                src[1], obj_surface->width,
                rect->width, rect->height / 2);
 
-    dri_bo_unmap(obj_surface->bo);
+    if (tiling != I915_TILING_NONE)
+        drm_intel_gem_bo_unmap_gtt(obj_surface->bo);
+    else
+        dri_bo_unmap(obj_surface->bo);
 }
 
 VAStatus 
@@ -1736,7 +1938,7 @@ i965_PutSurface(VADriverContextP ctx,
      * will get here
      */
     obj_surface = SURFACE(surface);
-    if (obj_surface->bo == NULL)
+    if (!obj_surface || !obj_surface->bo)
         return VA_STATUS_SUCCESS;
 
     dri_drawable = dri_get_drawable(ctx, (Drawable)draw);
@@ -1797,10 +1999,10 @@ i965_PutSurface(VADriverContextP ctx,
     dri_swap_buffer(ctx, dri_drawable);
     obj_surface->flags |= SURFACE_DISPLAYED;
 
-    if (!(obj_surface->flags & SURFACE_REFERENCED)) {
+    if ((obj_surface->flags & SURFACE_ALL_MASK) == SURFACE_DISPLAYED) {
         dri_bo_unreference(obj_surface->bo);
         obj_surface->bo = NULL;
-        obj_surface->flags = 0;
+        obj_surface->flags &= ~SURFACE_REF_DIS_MASK;
 
         if (obj_surface->free_private_data)
             obj_surface->free_private_data(&obj_surface->private_data);
@@ -1817,6 +2019,9 @@ i965_Terminate(VADriverContextP ctx)
     if (i965_render_terminate(ctx) == False)
 	return VA_STATUS_ERROR_UNKNOWN;
 
+    if (i965_post_processing_terminate(ctx) == False)
+        return VA_STATUS_ERROR_UNKNOWN;
+
     if (i965_media_terminate(ctx) == False)
 	return VA_STATUS_ERROR_UNKNOWN;
 
@@ -1839,6 +2044,7 @@ i965_Terminate(VADriverContextP ctx)
 VAStatus 
 VA_DRIVER_INIT_FUNC(  VADriverContextP ctx )
 {
+    struct VADriverVTable * const vtable = ctx->vtable;
     struct i965_driver_data *i965;
     int result;
 
@@ -1852,48 +2058,48 @@ VA_DRIVER_INIT_FUNC(  VADriverContextP ctx )
     ctx->max_display_attributes = I965_MAX_DISPLAY_ATTRIBUTES;
     ctx->str_vendor = I965_STR_VENDOR;
 
-    ctx->vtable.vaTerminate = i965_Terminate;
-    ctx->vtable.vaQueryConfigEntrypoints = i965_QueryConfigEntrypoints;
-    ctx->vtable.vaQueryConfigProfiles = i965_QueryConfigProfiles;
-    ctx->vtable.vaQueryConfigEntrypoints = i965_QueryConfigEntrypoints;
-    ctx->vtable.vaQueryConfigAttributes = i965_QueryConfigAttributes;
-    ctx->vtable.vaCreateConfig = i965_CreateConfig;
-    ctx->vtable.vaDestroyConfig = i965_DestroyConfig;
-    ctx->vtable.vaGetConfigAttributes = i965_GetConfigAttributes;
-    ctx->vtable.vaCreateSurfaces = i965_CreateSurfaces;
-    ctx->vtable.vaDestroySurfaces = i965_DestroySurfaces;
-    ctx->vtable.vaCreateContext = i965_CreateContext;
-    ctx->vtable.vaDestroyContext = i965_DestroyContext;
-    ctx->vtable.vaCreateBuffer = i965_CreateBuffer;
-    ctx->vtable.vaBufferSetNumElements = i965_BufferSetNumElements;
-    ctx->vtable.vaMapBuffer = i965_MapBuffer;
-    ctx->vtable.vaUnmapBuffer = i965_UnmapBuffer;
-    ctx->vtable.vaDestroyBuffer = i965_DestroyBuffer;
-    ctx->vtable.vaBeginPicture = i965_BeginPicture;
-    ctx->vtable.vaRenderPicture = i965_RenderPicture;
-    ctx->vtable.vaEndPicture = i965_EndPicture;
-    ctx->vtable.vaSyncSurface = i965_SyncSurface;
-    ctx->vtable.vaQuerySurfaceStatus = i965_QuerySurfaceStatus;
-    ctx->vtable.vaPutSurface = i965_PutSurface;
-    ctx->vtable.vaQueryImageFormats = i965_QueryImageFormats;
-    ctx->vtable.vaCreateImage = i965_CreateImage;
-    ctx->vtable.vaDeriveImage = i965_DeriveImage;
-    ctx->vtable.vaDestroyImage = i965_DestroyImage;
-    ctx->vtable.vaSetImagePalette = i965_SetImagePalette;
-    ctx->vtable.vaGetImage = i965_GetImage;
-    ctx->vtable.vaPutImage = i965_PutImage;
-    ctx->vtable.vaQuerySubpictureFormats = i965_QuerySubpictureFormats;
-    ctx->vtable.vaCreateSubpicture = i965_CreateSubpicture;
-    ctx->vtable.vaDestroySubpicture = i965_DestroySubpicture;
-    ctx->vtable.vaSetSubpictureImage = i965_SetSubpictureImage;
-    ctx->vtable.vaSetSubpictureChromakey = i965_SetSubpictureChromakey;
-    ctx->vtable.vaSetSubpictureGlobalAlpha = i965_SetSubpictureGlobalAlpha;
-    ctx->vtable.vaAssociateSubpicture = i965_AssociateSubpicture;
-    ctx->vtable.vaDeassociateSubpicture = i965_DeassociateSubpicture;
-    ctx->vtable.vaQueryDisplayAttributes = i965_QueryDisplayAttributes;
-    ctx->vtable.vaGetDisplayAttributes = i965_GetDisplayAttributes;
-    ctx->vtable.vaSetDisplayAttributes = i965_SetDisplayAttributes;
-//    ctx->vtable.vaDbgCopySurfaceToBuffer = i965_DbgCopySurfaceToBuffer;
+    vtable->vaTerminate = i965_Terminate;
+    vtable->vaQueryConfigEntrypoints = i965_QueryConfigEntrypoints;
+    vtable->vaQueryConfigProfiles = i965_QueryConfigProfiles;
+    vtable->vaQueryConfigEntrypoints = i965_QueryConfigEntrypoints;
+    vtable->vaQueryConfigAttributes = i965_QueryConfigAttributes;
+    vtable->vaCreateConfig = i965_CreateConfig;
+    vtable->vaDestroyConfig = i965_DestroyConfig;
+    vtable->vaGetConfigAttributes = i965_GetConfigAttributes;
+    vtable->vaCreateSurfaces = i965_CreateSurfaces;
+    vtable->vaDestroySurfaces = i965_DestroySurfaces;
+    vtable->vaCreateContext = i965_CreateContext;
+    vtable->vaDestroyContext = i965_DestroyContext;
+    vtable->vaCreateBuffer = i965_CreateBuffer;
+    vtable->vaBufferSetNumElements = i965_BufferSetNumElements;
+    vtable->vaMapBuffer = i965_MapBuffer;
+    vtable->vaUnmapBuffer = i965_UnmapBuffer;
+    vtable->vaDestroyBuffer = i965_DestroyBuffer;
+    vtable->vaBeginPicture = i965_BeginPicture;
+    vtable->vaRenderPicture = i965_RenderPicture;
+    vtable->vaEndPicture = i965_EndPicture;
+    vtable->vaSyncSurface = i965_SyncSurface;
+    vtable->vaQuerySurfaceStatus = i965_QuerySurfaceStatus;
+    vtable->vaPutSurface = i965_PutSurface;
+    vtable->vaQueryImageFormats = i965_QueryImageFormats;
+    vtable->vaCreateImage = i965_CreateImage;
+    vtable->vaDeriveImage = i965_DeriveImage;
+    vtable->vaDestroyImage = i965_DestroyImage;
+    vtable->vaSetImagePalette = i965_SetImagePalette;
+    vtable->vaGetImage = i965_GetImage;
+    vtable->vaPutImage = i965_PutImage;
+    vtable->vaQuerySubpictureFormats = i965_QuerySubpictureFormats;
+    vtable->vaCreateSubpicture = i965_CreateSubpicture;
+    vtable->vaDestroySubpicture = i965_DestroySubpicture;
+    vtable->vaSetSubpictureImage = i965_SetSubpictureImage;
+    vtable->vaSetSubpictureChromakey = i965_SetSubpictureChromakey;
+    vtable->vaSetSubpictureGlobalAlpha = i965_SetSubpictureGlobalAlpha;
+    vtable->vaAssociateSubpicture = i965_AssociateSubpicture;
+    vtable->vaDeassociateSubpicture = i965_DeassociateSubpicture;
+    vtable->vaQueryDisplayAttributes = i965_QueryDisplayAttributes;
+    vtable->vaGetDisplayAttributes = i965_GetDisplayAttributes;
+    vtable->vaSetDisplayAttributes = i965_SetDisplayAttributes;
+//    vtable->vaDbgCopySurfaceToBuffer = i965_DbgCopySurfaceToBuffer;
 
     i965 = (struct i965_driver_data *)calloc(1, sizeof(*i965));
     assert(i965);
diff --git a/i965_drv_video/i965_drv_video.h b/i965_drv_video/i965_drv_video.h
index 7fc9cdb..16694d0 100644
--- a/i965_drv_video/i965_drv_video.h
+++ b/i965_drv_video/i965_drv_video.h
@@ -96,6 +96,12 @@ struct object_context
 
 #define SURFACE_REFERENCED      (1 << 0)
 #define SURFACE_DISPLAYED       (1 << 1)
+#define SURFACE_DERIVED         (1 << 2)
+#define SURFACE_REF_DIS_MASK    ((SURFACE_REFERENCED) | \
+                                 (SURFACE_DISPLAYED))
+#define SURFACE_ALL_MASK        ((SURFACE_REFERENCED) | \
+                                 (SURFACE_DISPLAYED) |  \
+                                 (SURFACE_DERIVED))
 
 struct object_surface 
 {
@@ -134,6 +140,7 @@ struct object_image
     VAImage image;
     dri_bo *bo;
     unsigned int *palette;
+    VASurfaceID derived_surface;
 };
 
 struct object_subpic 
@@ -160,6 +167,7 @@ struct i965_driver_data
     struct object_heap subpic_heap;
     struct i965_media_state media_state;
     struct i965_render_state render_state;
+    void *pp_context;
 };
 
 #define NEW_CONFIG_ID() object_heap_allocate(&i965->config_heap);
diff --git a/i965_drv_video/i965_post_processing.c b/i965_drv_video/i965_post_processing.c
index 633100c..29e02a2 100644
--- a/i965_drv_video/i965_post_processing.c
+++ b/i965_drv_video/i965_post_processing.c
@@ -41,6 +41,9 @@
 #include "i965_render.h"
 #include "i965_drv_video.h"
 
+#define HAS_PP(ctx) (IS_IRONLAKE((ctx)->intel.device_id) ||     \
+                     IS_GEN6((ctx)->intel.device_id))
+
 struct pp_module
 {
     /* kernel */
@@ -76,21 +79,21 @@ static uint32_t pp_nv12_dndi_gen5[][4] = {
 #include "shaders/post_processing/nv12_dndi_nv12.g4b.gen5"
 };
 
-static void ironlake_pp_null_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                        unsigned short srcw, unsigned short srch,
-                                        unsigned short destw, unsigned short desth);
-static void ironlake_pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                            unsigned short srcw, unsigned short srch,
-                                            unsigned short destw, unsigned short desth);
-static void ironlake_pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                                unsigned short srcw, unsigned short srch,
-                                                unsigned short destw, unsigned short desth);
-static void ironlake_pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                                  unsigned short srcw, unsigned short srch,
-                                                  unsigned short destw, unsigned short desth);
-static void ironlake_pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                             unsigned short srcw, unsigned short srch,
-                                             unsigned short destw, unsigned short desth);
+static void pp_null_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                               unsigned short srcw, unsigned short srch,
+                               unsigned short destw, unsigned short desth);
+static void pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                                   unsigned short srcw, unsigned short srch,
+                                   unsigned short destw, unsigned short desth);
+static void pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                                       unsigned short srcw, unsigned short srch,
+                                       unsigned short destw, unsigned short desth);
+static void pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                                         unsigned short srcw, unsigned short srch,
+                                         unsigned short destw, unsigned short desth);
+static void pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                                    unsigned short srcw, unsigned short srch,
+                                    unsigned short destw, unsigned short desth);
 
 static struct pp_module pp_modules_gen5[] = {
     {
@@ -99,7 +102,7 @@ static struct pp_module pp_modules_gen5[] = {
         pp_null_gen5,
         sizeof(pp_null_gen5),
         NULL,
-        ironlake_pp_null_initialize,
+        pp_null_initialize,
     },
 
     {
@@ -108,7 +111,7 @@ static struct pp_module pp_modules_gen5[] = {
         pp_nv12_load_save_gen5,
         sizeof(pp_nv12_load_save_gen5),
         NULL,
-        ironlake_pp_nv12_load_save_initialize,
+        pp_nv12_load_save_initialize,
     },
 
     {
@@ -117,7 +120,7 @@ static struct pp_module pp_modules_gen5[] = {
         pp_nv12_scaling_gen5,
         sizeof(pp_nv12_scaling_gen5),
         NULL,
-        ironlake_pp_nv12_scaling_initialize,
+        pp_nv12_scaling_initialize,
     },
 
     {
@@ -126,7 +129,7 @@ static struct pp_module pp_modules_gen5[] = {
         pp_nv12_avs_gen5,
         sizeof(pp_nv12_avs_gen5),
         NULL,
-        ironlake_pp_nv12_avs_initialize,
+        pp_nv12_avs_initialize,
     },
 
     {
@@ -135,7 +138,74 @@ static struct pp_module pp_modules_gen5[] = {
         pp_nv12_dndi_gen5,
         sizeof(pp_nv12_dndi_gen5),
         NULL,
-        ironlake_pp_nv12_dndi_initialize,
+        pp_nv12_dndi_initialize,
+    },
+};
+
+static uint32_t pp_null_gen6[][4] = {
+#include "shaders/post_processing/null.g6b"
+};
+
+static uint32_t pp_nv12_load_save_gen6[][4] = {
+#include "shaders/post_processing/nv12_load_save_nv12.g6b"
+};
+
+static uint32_t pp_nv12_scaling_gen6[][4] = {
+#include "shaders/post_processing/nv12_scaling_nv12.g6b"
+};
+
+static uint32_t pp_nv12_avs_gen6[][4] = {
+#include "shaders/post_processing/nv12_avs_nv12.g6b"
+};
+
+static uint32_t pp_nv12_dndi_gen6[][4] = {
+#include "shaders/post_processing/nv12_dndi_nv12.g6b"
+};
+
+static struct pp_module pp_modules_gen6[] = {
+    {
+        "NULL module (for testing)",
+        PP_NULL,
+        pp_null_gen6,
+        sizeof(pp_null_gen6),
+        NULL,
+        pp_null_initialize,
+    },
+
+    {
+        "NV12 Load & Save module",
+        PP_NV12_LOAD_SAVE,
+        pp_nv12_load_save_gen6,
+        sizeof(pp_nv12_load_save_gen6),
+        NULL,
+        pp_nv12_load_save_initialize,
+    },
+
+    {
+        "NV12 Scaling module",
+        PP_NV12_SCALING,
+        pp_nv12_scaling_gen6,
+        sizeof(pp_nv12_scaling_gen6),
+        NULL,
+        pp_nv12_scaling_initialize,
+    },
+
+    {
+        "NV12 AVS module",
+        PP_NV12_AVS,
+        pp_nv12_avs_gen6,
+        sizeof(pp_nv12_avs_gen6),
+        NULL,
+        pp_nv12_avs_initialize,
+    },
+
+    {
+        "NV12 DNDI module",
+        PP_NV12_DNDI,
+        pp_nv12_dndi_gen6,
+        sizeof(pp_nv12_dndi_gen6),
+        NULL,
+        pp_nv12_dndi_initialize,
     },
 };
 
@@ -143,7 +213,7 @@ static struct pp_module pp_modules_gen5[] = {
 
 static struct pp_module *pp_modules = NULL;
 
-struct ironlake_pp_static_parameter
+struct pp_static_parameter
 {
     struct {
         /* Procamp r1.0 */
@@ -296,7 +366,7 @@ struct ironlake_pp_static_parameter
     } grf4;
 };
 
-struct ironlake_pp_inline_parameter
+struct pp_inline_parameter
 {
     struct {
         /* ALL r5.0 */
@@ -347,8 +417,46 @@ struct ironlake_pp_inline_parameter
     } grf6;
 };
 
-static struct ironlake_pp_static_parameter ironlake_pp_static_parameter;
-static struct ironlake_pp_inline_parameter ironlake_pp_inline_parameter;
+static struct pp_static_parameter pp_static_parameter;
+static struct pp_inline_parameter pp_inline_parameter;
+
+static void
+pp_set_surface_tiling(struct i965_surface_state *ss, unsigned int tiling)
+{
+    switch (tiling) {
+    case I915_TILING_NONE:
+        ss->ss3.tiled_surface = 0;
+        ss->ss3.tile_walk = 0;
+        break;
+    case I915_TILING_X:
+        ss->ss3.tiled_surface = 1;
+        ss->ss3.tile_walk = I965_TILEWALK_XMAJOR;
+        break;
+    case I915_TILING_Y:
+        ss->ss3.tiled_surface = 1;
+        ss->ss3.tile_walk = I965_TILEWALK_YMAJOR;
+        break;
+    }
+}
+
+static void
+pp_set_surface2_tiling(struct i965_surface_state2 *ss, unsigned int tiling)
+{
+    switch (tiling) {
+    case I915_TILING_NONE:
+        ss->ss2.tiled_surface = 0;
+        ss->ss2.tile_walk = 0;
+        break;
+    case I915_TILING_X:
+        ss->ss2.tiled_surface = 1;
+        ss->ss2.tile_walk = I965_TILEWALK_XMAJOR;
+        break;
+    case I915_TILING_Y:
+        ss->ss2.tiled_surface = 1;
+        ss->ss2.tile_walk = I965_TILEWALK_YMAJOR;
+        break;
+    }
+}
 
 static void
 ironlake_pp_surface_state(struct i965_post_processing_context *pp_context)
@@ -397,6 +505,7 @@ ironlake_pp_interface_descriptor_table(struct i965_post_processing_context *pp_c
                       pp_context->binding_table.bo);
 
     dri_bo_unmap(bo);
+    pp_context->idrt.num_interface_descriptors++;
 }
 
 static void
@@ -459,11 +568,11 @@ ironlake_pp_upload_constants(struct i965_post_processing_context *pp_context)
 {
     unsigned char *constant_buffer;
 
-    assert(sizeof(ironlake_pp_static_parameter) == 128);
+    assert(sizeof(pp_static_parameter) == 128);
     dri_bo_map(pp_context->curbe.bo, 1);
     assert(pp_context->curbe.bo->virtual);
     constant_buffer = pp_context->curbe.bo->virtual;
-    memcpy(constant_buffer, &ironlake_pp_static_parameter, sizeof(ironlake_pp_static_parameter));
+    memcpy(constant_buffer, &pp_static_parameter, sizeof(pp_static_parameter));
     dri_bo_unmap(pp_context->curbe.bo);
 }
 
@@ -471,7 +580,7 @@ static void
 ironlake_pp_states_setup(VADriverContextP ctx)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
 
     ironlake_pp_surface_state(pp_context);
     ironlake_pp_binding_table(pp_context);
@@ -570,8 +679,8 @@ ironlake_pp_object_walker(VADriverContextP ctx, struct i965_post_processing_cont
                 OUT_BATCH(ctx, 0);
 
                 /* inline data grf 5-6 */
-                assert(sizeof(ironlake_pp_inline_parameter) == 64);
-                intel_batchbuffer_data(ctx, &ironlake_pp_inline_parameter, sizeof(ironlake_pp_inline_parameter));
+                assert(sizeof(pp_inline_parameter) == 64);
+                intel_batchbuffer_data(ctx, &pp_inline_parameter, sizeof(pp_inline_parameter));
 
                 ADVANCE_BATCH(ctx);
             }
@@ -583,7 +692,7 @@ static void
 ironlake_pp_pipeline_setup(VADriverContextP ctx)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
 
     intel_batchbuffer_start_atomic(ctx, 0x1000);
     intel_batchbuffer_emit_mi_flush(ctx);
@@ -616,12 +725,12 @@ pp_null_set_block_parameter(void *private_context, int x, int y)
 }
 
 static void
-ironlake_pp_null_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                            unsigned short srcw, unsigned short srch,
-                            unsigned short destw, unsigned short desth)
+pp_null_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                   unsigned short srcw, unsigned short srch,
+                   unsigned short destw, unsigned short desth)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
     struct object_surface *obj_surface;
 
     /* surface */
@@ -658,27 +767,28 @@ pp_load_save_y_steps(void *private_context)
 static int
 pp_load_save_set_block_parameter(void *private_context, int x, int y)
 {
-    ironlake_pp_inline_parameter.grf5.block_vertical_mask = 0xff;
-    ironlake_pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
-    ironlake_pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
-    ironlake_pp_inline_parameter.grf5.destination_block_vertical_origin = y * 8;
+    pp_inline_parameter.grf5.block_vertical_mask = 0xff;
+    pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
+    pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
+    pp_inline_parameter.grf5.destination_block_vertical_origin = y * 8;
 
     return 0;
 }
 
 static void
-ironlake_pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                      unsigned short srcw, unsigned short srch,
-                                      unsigned short destw, unsigned short desth)
+pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                             unsigned short srcw, unsigned short srch,
+                             unsigned short destw, unsigned short desth)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
     struct pp_load_save_context *pp_load_save_context = (struct pp_load_save_context *)&pp_context->private_context;
     struct object_surface *obj_surface;
     struct i965_surface_state *ss;
     dri_bo *bo;
     int index, w, h;
     int orig_w, orig_h;
+    unsigned int tiling, swizzle;
 
     /* surface */
     obj_surface = SURFACE(surface);
@@ -699,6 +809,8 @@ ironlake_pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface,
     obj_surface->orig_pp_out_height = obj_surface->orig_height;
 
     /* source Y surface index 1 */
+    dri_bo_get_tiling(obj_surface->bo, &tiling, &swizzle);
+
     index = 1;
     pp_context->surfaces[index].s_bo = obj_surface->bo;
     dri_bo_reference(pp_context->surfaces[index].s_bo);
@@ -718,6 +830,7 @@ ironlake_pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface,
     ss->ss2.width = orig_w / 4 - 1;
     ss->ss2.height = orig_h - 1;
     ss->ss3.pitch = w - 1;
+    pp_set_surface_tiling(ss, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -746,6 +859,7 @@ ironlake_pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface,
     ss->ss2.width = orig_w / 4 - 1;
     ss->ss2.height = orig_h / 2 - 1;
     ss->ss3.pitch = w - 1;
+    pp_set_surface_tiling(ss, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -817,8 +931,8 @@ ironlake_pp_nv12_load_save_initialize(VADriverContextP ctx, VASurfaceID surface,
     pp_load_save_context->dest_h = h;
     pp_load_save_context->dest_w = w;
 
-    ironlake_pp_inline_parameter.grf5.block_count_x = w / 16;   /* 1 x N */
-    ironlake_pp_inline_parameter.grf5.number_blocks = w / 16;
+    pp_inline_parameter.grf5.block_count_x = w / 16;   /* 1 x N */
+    pp_inline_parameter.grf5.number_blocks = w / 16;
 }
 
 static int
@@ -838,24 +952,24 @@ pp_scaling_y_steps(void *private_context)
 static int
 pp_scaling_set_block_parameter(void *private_context, int x, int y)
 {
-    float src_x_steping = ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step;
-    float src_y_steping = ironlake_pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step;
+    float src_x_steping = pp_inline_parameter.grf5.normalized_video_x_scaling_step;
+    float src_y_steping = pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step;
 
-    ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = src_x_steping * x * 16;
-    ironlake_pp_inline_parameter.grf5.source_surface_block_normalized_vertical_origin = src_y_steping * y * 8;
-    ironlake_pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
-    ironlake_pp_inline_parameter.grf5.destination_block_vertical_origin = y * 8;
+    pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = src_x_steping * x * 16;
+    pp_inline_parameter.grf5.source_surface_block_normalized_vertical_origin = src_y_steping * y * 8;
+    pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
+    pp_inline_parameter.grf5.destination_block_vertical_origin = y * 8;
     
     return 0;
 }
 
 static void
-ironlake_pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                    unsigned short srcw, unsigned short srch,
-                                    unsigned short destw, unsigned short desth)
+pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                           unsigned short srcw, unsigned short srch,
+                           unsigned short destw, unsigned short desth)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
     struct pp_scaling_context *pp_scaling_context = (struct pp_scaling_context *)&pp_context->private_context;
     struct object_surface *obj_surface;
     struct i965_sampler_state *sampler_state;
@@ -866,6 +980,7 @@ ironlake_pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, i
     int orig_w, orig_h;
     int pp_out_w, pp_out_h;
     int orig_pp_out_w, orig_pp_out_h;
+    unsigned int tiling, swizzle;
 
     /* surface */
     obj_surface = SURFACE(surface);
@@ -890,6 +1005,8 @@ ironlake_pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, i
     obj_surface->pp_out_height = pp_out_h;
 
     /* source Y surface index 1 */
+    dri_bo_get_tiling(obj_surface->bo, &tiling, &swizzle);
+
     index = 1;
     pp_context->surfaces[index].s_bo = obj_surface->bo;
     dri_bo_reference(pp_context->surfaces[index].s_bo);
@@ -909,6 +1026,7 @@ ironlake_pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, i
     ss->ss2.width = orig_w - 1;
     ss->ss2.height = orig_h - 1;
     ss->ss3.pitch = w - 1;
+    pp_set_surface_tiling(ss, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -937,6 +1055,7 @@ ironlake_pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, i
     ss->ss2.width = orig_w / 2 - 1;
     ss->ss2.height = orig_h / 2 - 1;
     ss->ss3.pitch = w - 1;
+    pp_set_surface_tiling(ss, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -1030,12 +1149,12 @@ ironlake_pp_nv12_scaling_initialize(VADriverContextP ctx, VASurfaceID surface, i
     pp_scaling_context->dest_w = pp_out_w;
     pp_scaling_context->dest_h = pp_out_h;
 
-    ironlake_pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step = (float) 1.0 / pp_out_h;
-    ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step = (float) 1.0 / pp_out_w;
-    ironlake_pp_inline_parameter.grf5.block_count_x = pp_out_w / 16;   /* 1 x N */
-    ironlake_pp_inline_parameter.grf5.number_blocks = pp_out_w / 16;
-    ironlake_pp_inline_parameter.grf5.block_vertical_mask = 0xff;
-    ironlake_pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
+    pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step = (float) 1.0 / pp_out_h;
+    pp_inline_parameter.grf5.normalized_video_x_scaling_step = (float) 1.0 / pp_out_w;
+    pp_inline_parameter.grf5.block_count_x = pp_out_w / 16;   /* 1 x N */
+    pp_inline_parameter.grf5.number_blocks = pp_out_w / 16;
+    pp_inline_parameter.grf5.block_vertical_mask = 0xff;
+    pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
 }
 
 static int
@@ -1060,15 +1179,15 @@ pp_avs_set_block_parameter(void *private_context, int x, int y)
     int tmp_w = ALIGN(pp_avs_context->dest_h * pp_avs_context->src_w / pp_avs_context->src_h, 16);
 
     if (tmp_w >= pp_avs_context->dest_w) {
-        ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step = 1.0 / tmp_w;
-        ironlake_pp_inline_parameter.grf6.video_step_delta = 0;
+        pp_inline_parameter.grf5.normalized_video_x_scaling_step = 1.0 / tmp_w;
+        pp_inline_parameter.grf6.video_step_delta = 0;
         
         if (x == 0) {
-            ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = (float)(tmp_w - pp_avs_context->dest_w) / tmp_w / 2;
+            pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = (float)(tmp_w - pp_avs_context->dest_w) / tmp_w / 2;
         } else {
-            src_x_steping = ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step;
-            video_step_delta = ironlake_pp_inline_parameter.grf6.video_step_delta;
-            ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
+            src_x_steping = pp_inline_parameter.grf5.normalized_video_x_scaling_step;
+            video_step_delta = pp_inline_parameter.grf6.video_step_delta;
+            pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
                 16 * 15 * video_step_delta / 2;
         }
     } else {
@@ -1084,15 +1203,15 @@ pp_avs_set_block_parameter(void *private_context, int x, int y)
         f = (float) n2 * 16 / tmp_w;
         
         if (n0 < 5) {
-            ironlake_pp_inline_parameter.grf6.video_step_delta = 0.0;
+            pp_inline_parameter.grf6.video_step_delta = 0.0;
 
             if (x == 0) {
-                ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step = 1.0 / pp_avs_context->dest_w;
-                ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = 0.0;
+                pp_inline_parameter.grf5.normalized_video_x_scaling_step = 1.0 / pp_avs_context->dest_w;
+                pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = 0.0;
             } else {
-                src_x_steping = ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step;
-                video_step_delta = ironlake_pp_inline_parameter.grf6.video_step_delta;
-                ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
+                src_x_steping = pp_inline_parameter.grf5.normalized_video_x_scaling_step;
+                video_step_delta = pp_inline_parameter.grf6.video_step_delta;
+                pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
                     16 * 15 * video_step_delta / 2;
             }
         } else {
@@ -1101,90 +1220,96 @@ pp_avs_set_block_parameter(void *private_context, int x, int y)
                 float a = f / (nls_left * 16 * factor_b);
                 float b = (f - nls_left * 16 * a) * 2 / (nls_left * 16 * (nls_left * 16 - 1));
                 
-                ironlake_pp_inline_parameter.grf6.video_step_delta = b;
+                pp_inline_parameter.grf6.video_step_delta = b;
 
                 if (x == 0) {
-                    ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = 0.0;
-                    ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step = a;
+                    pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin = 0.0;
+                    pp_inline_parameter.grf5.normalized_video_x_scaling_step = a;
                 } else {
-                    src_x_steping = ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step;
-                    video_step_delta = ironlake_pp_inline_parameter.grf6.video_step_delta;
-                    ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
+                    src_x_steping = pp_inline_parameter.grf5.normalized_video_x_scaling_step;
+                    video_step_delta = pp_inline_parameter.grf6.video_step_delta;
+                    pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
                         16 * 15 * video_step_delta / 2;
-                    ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step += 16 * b;
+                    pp_inline_parameter.grf5.normalized_video_x_scaling_step += 16 * b;
                 }
             } else if (x < (pp_avs_context->dest_w / 16 - nls_right)) {
                 /* scale the center linearly */
-                src_x_steping = ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step;
-                video_step_delta = ironlake_pp_inline_parameter.grf6.video_step_delta;
-                ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
+                src_x_steping = pp_inline_parameter.grf5.normalized_video_x_scaling_step;
+                video_step_delta = pp_inline_parameter.grf6.video_step_delta;
+                pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
                     16 * 15 * video_step_delta / 2;
-                ironlake_pp_inline_parameter.grf6.video_step_delta = 0.0;
-                ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step = 1.0 / tmp_w;
+                pp_inline_parameter.grf6.video_step_delta = 0.0;
+                pp_inline_parameter.grf5.normalized_video_x_scaling_step = 1.0 / tmp_w;
             } else {
                 float a = f / (nls_right * 16 * factor_b);
                 float b = (f - nls_right * 16 * a) * 2 / (nls_right * 16 * (nls_right * 16 - 1));
 
-                src_x_steping = ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step;
-                video_step_delta = ironlake_pp_inline_parameter.grf6.video_step_delta;
-                ironlake_pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
+                src_x_steping = pp_inline_parameter.grf5.normalized_video_x_scaling_step;
+                video_step_delta = pp_inline_parameter.grf6.video_step_delta;
+                pp_inline_parameter.grf5.r5_1.source_surface_block_normalized_horizontal_origin += src_x_steping * 16 +
                     16 * 15 * video_step_delta / 2;
-                ironlake_pp_inline_parameter.grf6.video_step_delta = -b;
+                pp_inline_parameter.grf6.video_step_delta = -b;
 
                 if (x == (pp_avs_context->dest_w / 16 - nls_right))
-                    ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step = a + (nls_right * 16  - 1) * b;
+                    pp_inline_parameter.grf5.normalized_video_x_scaling_step = a + (nls_right * 16  - 1) * b;
                 else
-                    ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step -= b * 16;
+                    pp_inline_parameter.grf5.normalized_video_x_scaling_step -= b * 16;
             }
         }
     }
 
-    src_y_steping = ironlake_pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step;
-    ironlake_pp_inline_parameter.grf5.source_surface_block_normalized_vertical_origin = src_y_steping * y * 8;
-    ironlake_pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
-    ironlake_pp_inline_parameter.grf5.destination_block_vertical_origin = y * 8;
+    src_y_steping = pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step;
+    pp_inline_parameter.grf5.source_surface_block_normalized_vertical_origin = src_y_steping * y * 8;
+    pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
+    pp_inline_parameter.grf5.destination_block_vertical_origin = y * 8;
 
     return 0;
 }
 
 static void
-ironlake_pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                unsigned short srcw, unsigned short srch,
-                                unsigned short destw, unsigned short desth)
+pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                       unsigned short srcw, unsigned short srch,
+                       unsigned short destw, unsigned short desth)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
     struct pp_avs_context *pp_avs_context = (struct pp_avs_context *)&pp_context->private_context;
     struct object_surface *obj_surface;
     struct i965_surface_state *ss;
     struct i965_sampler_8x8 *sampler_8x8;
     struct i965_sampler_8x8_state *sampler_8x8_state;
     struct i965_surface_state2 *ss_8x8;
-    dri_bo *bo;
+    dri_bo *bo, *src_bo;
     int index;
     int w, h;
     int orig_w, orig_h;
     int pp_out_w, pp_out_h;
     int orig_pp_out_w, orig_pp_out_h;
+    unsigned int tiling, swizzle;
 
     /* surface */
     obj_surface = SURFACE(surface);
     
     if (input == 1) {
-        assert(obj_surface->pp_out_bo);
         orig_w = obj_surface->orig_pp_out_width;
         orig_h = obj_surface->orig_pp_out_height;
         w = obj_surface->pp_out_width;
         h = obj_surface->pp_out_height;
+        src_bo = obj_surface->pp_out_bo;
     } else {
         orig_w = obj_surface->orig_width;
         orig_h = obj_surface->orig_height;
         w = obj_surface->width;
         h = obj_surface->height;
-    } 
+        src_bo = obj_surface->bo;
+    }
+
+    assert(src_bo);
+    dri_bo_get_tiling(src_bo, &tiling, &swizzle);
+
     /* source Y surface index 1 */
     index = 1;
-    pp_context->surfaces[index].s_bo = (input == 1 ? obj_surface->pp_out_bo : obj_surface->bo);
+    pp_context->surfaces[index].s_bo = src_bo;
     dri_bo_reference(pp_context->surfaces[index].s_bo);
     bo = dri_bo_alloc(i965->intel.bufmgr, 
                       "Y surface state for sample_8x8", 
@@ -1206,6 +1331,7 @@ ironlake_pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int i
     ss_8x8->ss2.surface_format = SURFACE_FORMAT_Y8_UNORM;
     ss_8x8->ss3.x_offset_for_cb = 0;
     ss_8x8->ss3.y_offset_for_cb = 0;
+    pp_set_surface2_tiling(ss_8x8, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -1216,7 +1342,7 @@ ironlake_pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int i
 
     /* source UV surface index 2 */
     index = 2;
-    pp_context->surfaces[index].s_bo = (input == 1 ? obj_surface->pp_out_bo : obj_surface->bo);
+    pp_context->surfaces[index].s_bo = src_bo;
     dri_bo_reference(pp_context->surfaces[index].s_bo);
     bo = dri_bo_alloc(i965->intel.bufmgr, 
                       "UV surface state for sample_8x8", 
@@ -1230,14 +1356,15 @@ ironlake_pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int i
     memset(ss_8x8, 0, sizeof(*ss_8x8));
     ss_8x8->ss0.surface_base_address = pp_context->surfaces[index].s_bo->offset + w * h;
     ss_8x8->ss1.cbcr_pixel_offset_v_direction = 0;
-    ss_8x8->ss1.width = orig_w / 2 - 1;
-    ss_8x8->ss1.height = orig_h / 2 - 1;
+    ss_8x8->ss1.width = orig_w - 1;
+    ss_8x8->ss1.height = orig_h - 1;
     ss_8x8->ss2.half_pitch_for_chroma = 0;
     ss_8x8->ss2.pitch = w - 1;
-    ss_8x8->ss2.interleave_chroma = 0;
-    ss_8x8->ss2.surface_format = SURFACE_FORMAT_R8B8_UNORM;
+    ss_8x8->ss2.interleave_chroma = 1;
+    ss_8x8->ss2.surface_format = SURFACE_FORMAT_PLANAR_420_8;
     ss_8x8->ss3.x_offset_for_cb = 0;
     ss_8x8->ss3.y_offset_for_cb = 0;
+    pp_set_surface2_tiling(ss_8x8, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -1486,14 +1613,14 @@ ironlake_pp_nv12_avs_initialize(VADriverContextP ctx, VASurfaceID surface, int i
     pp_avs_context->src_w = w;
     pp_avs_context->src_h = h;
 
-    ironlake_pp_static_parameter.grf4.r4_2.avs.nlas = 1;
-    ironlake_pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step = (float) 1.0 / pp_out_h;
-    ironlake_pp_inline_parameter.grf5.normalized_video_x_scaling_step = (float) 1.0 / pp_out_w;
-    ironlake_pp_inline_parameter.grf5.block_count_x = 1;        /* M x 1 */
-    ironlake_pp_inline_parameter.grf5.number_blocks = pp_out_h / 8;
-    ironlake_pp_inline_parameter.grf5.block_vertical_mask = 0xff;
-    ironlake_pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
-    ironlake_pp_inline_parameter.grf6.video_step_delta = 0.0;
+    pp_static_parameter.grf4.r4_2.avs.nlas = 1;
+    pp_static_parameter.grf1.r1_6.normalized_video_y_scaling_step = (float) 1.0 / pp_out_h;
+    pp_inline_parameter.grf5.normalized_video_x_scaling_step = (float) 1.0 / pp_out_w;
+    pp_inline_parameter.grf5.block_count_x = 1;        /* M x 1 */
+    pp_inline_parameter.grf5.number_blocks = pp_out_h / 8;
+    pp_inline_parameter.grf5.block_vertical_mask = 0xff;
+    pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
+    pp_inline_parameter.grf6.video_step_delta = 0.0;
 }
 
 static int
@@ -1513,19 +1640,19 @@ pp_dndi_y_steps(void *private_context)
 static int
 pp_dndi_set_block_parameter(void *private_context, int x, int y)
 {
-    ironlake_pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
-    ironlake_pp_inline_parameter.grf5.destination_block_vertical_origin = y * 4;
+    pp_inline_parameter.grf5.destination_block_horizontal_origin = x * 16;
+    pp_inline_parameter.grf5.destination_block_vertical_origin = y * 4;
 
     return 0;
 }
 
 static 
-void ironlake_pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
-                                      unsigned short srcw, unsigned short srch,
-                                      unsigned short destw, unsigned short desth)
+void pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface, int input,
+                             unsigned short srcw, unsigned short srch,
+                             unsigned short destw, unsigned short desth)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
     struct pp_dndi_context *pp_dndi_context = (struct pp_dndi_context *)&pp_context->private_context;
     struct object_surface *obj_surface;
     struct i965_surface_state *ss;
@@ -1535,6 +1662,7 @@ void ironlake_pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface,
     int index;
     int w, h;
     int orig_w, orig_h;
+    unsigned int tiling, swizzle;
 
     /* surface */
     obj_surface = SURFACE(surface);
@@ -1562,6 +1690,7 @@ void ironlake_pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface,
     obj_surface->pp_out_width = w;
     obj_surface->pp_out_height = h;
 
+    dri_bo_get_tiling(obj_surface->bo, &tiling, &swizzle);
     /* source UV surface index 2 */
     index = 2;
     pp_context->surfaces[index].s_bo = obj_surface->bo;
@@ -1582,6 +1711,7 @@ void ironlake_pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface,
     ss->ss2.width = orig_w / 4 - 1;
     ss->ss2.height = orig_h / 2 - 1;
     ss->ss3.pitch = w - 1;
+    pp_set_surface_tiling(ss, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -1617,6 +1747,7 @@ void ironlake_pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface,
     ss_dndi->ss2.tiled_surface = 0;
     ss_dndi->ss3.x_offset_for_cb = 0;
     ss_dndi->ss3.y_offset_for_cb = h;
+    pp_set_surface2_tiling(ss_dndi, tiling);
     dri_bo_emit_reloc(bo,
                       I915_GEM_DOMAIN_RENDER, 
                       0,
@@ -1774,15 +1905,15 @@ void ironlake_pp_nv12_dndi_initialize(VADriverContextP ctx, VASurfaceID surface,
     pp_context->pp_y_steps = pp_dndi_y_steps;
     pp_context->pp_set_block_parameter = pp_dndi_set_block_parameter;
 
-    ironlake_pp_static_parameter.grf1.statistics_surface_picth = w / 2;
-    ironlake_pp_static_parameter.grf1.r1_6.di.top_field_first = 0;
-    ironlake_pp_static_parameter.grf4.r4_2.di.motion_history_coefficient_m2 = 64;
-    ironlake_pp_static_parameter.grf4.r4_2.di.motion_history_coefficient_m1 = 192;
+    pp_static_parameter.grf1.statistics_surface_picth = w / 2;
+    pp_static_parameter.grf1.r1_6.di.top_field_first = 0;
+    pp_static_parameter.grf4.r4_2.di.motion_history_coefficient_m2 = 64;
+    pp_static_parameter.grf4.r4_2.di.motion_history_coefficient_m1 = 192;
 
-    ironlake_pp_inline_parameter.grf5.block_count_x = w / 16;   /* 1 x N */
-    ironlake_pp_inline_parameter.grf5.number_blocks = w / 16;
-    ironlake_pp_inline_parameter.grf5.block_vertical_mask = 0xff;
-    ironlake_pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
+    pp_inline_parameter.grf5.block_count_x = w / 16;   /* 1 x N */
+    pp_inline_parameter.grf5.number_blocks = w / 16;
+    pp_inline_parameter.grf5.block_vertical_mask = 0xff;
+    pp_inline_parameter.grf5.block_horizontal_mask = 0xffff;
 
     pp_dndi_context->dest_w = w;
     pp_dndi_context->dest_h = h;
@@ -1803,7 +1934,7 @@ ironlake_pp_initialize(VADriverContextP ctx,
                        int pp_index)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
     struct pp_module *pp_module;
     dri_bo *bo;
     int i;
@@ -1831,6 +1962,7 @@ ironlake_pp_initialize(VADriverContextP ctx,
                       4096);
     assert(bo);
     pp_context->idrt.bo = bo;
+    pp_context->idrt.num_interface_descriptors = 0;
 
     dri_bo_unreference(pp_context->sampler_state_table.bo);
     bo = dri_bo_alloc(i965->intel.bufmgr, 
@@ -1875,8 +2007,8 @@ ironlake_pp_initialize(VADriverContextP ctx,
         pp_context->surfaces[i].s_bo = NULL;
     }
 
-    memset(&ironlake_pp_static_parameter, 0, sizeof(ironlake_pp_static_parameter));
-    memset(&ironlake_pp_inline_parameter, 0, sizeof(ironlake_pp_inline_parameter));
+    memset(&pp_static_parameter, 0, sizeof(pp_static_parameter));
+    memset(&pp_inline_parameter, 0, sizeof(pp_inline_parameter));
     assert(pp_index >= PP_NULL && pp_index < NUM_PP_MODULES);
     assert(pp_modules);
     pp_context->current_pp = pp_index;
@@ -1887,6 +2019,371 @@ ironlake_pp_initialize(VADriverContextP ctx,
 }
 
 static void
+ironlake_post_processing(VADriverContextP ctx,
+                         VASurfaceID surface,
+                         int input,
+                         short srcx,
+                         short srcy,
+                         unsigned short srcw,
+                         unsigned short srch,
+                         short destx,
+                         short desty,
+                         unsigned short destw,
+                         unsigned short desth,
+                         int pp_index)
+{
+    ironlake_pp_initialize(ctx, surface, input,
+                           srcx, srcy, srcw, srch,
+                           destx, desty, destw, desth,
+                           pp_index);
+    ironlake_pp_states_setup(ctx);
+    ironlake_pp_pipeline_setup(ctx);
+}
+
+static void
+gen6_pp_initialize(VADriverContextP ctx,
+                   VASurfaceID surface,
+                   int input,
+                   short srcx,
+                   short srcy,
+                   unsigned short srcw,
+                   unsigned short srch,
+                   short destx,
+                   short desty,
+                   unsigned short destw,
+                   unsigned short desth,
+                   int pp_index)
+{
+    struct i965_driver_data *i965 = i965_driver_data(ctx);
+    struct i965_post_processing_context *pp_context = i965->pp_context;
+    struct pp_module *pp_module;
+    dri_bo *bo;
+    int i;
+
+    dri_bo_unreference(pp_context->curbe.bo);
+    bo = dri_bo_alloc(i965->intel.bufmgr,
+                      "constant buffer",
+                      4096, 
+                      4096);
+    assert(bo);
+    pp_context->curbe.bo = bo;
+
+    dri_bo_unreference(pp_context->binding_table.bo);
+    bo = dri_bo_alloc(i965->intel.bufmgr, 
+                      "binding table",
+                      sizeof(unsigned int), 
+                      4096);
+    assert(bo);
+    pp_context->binding_table.bo = bo;
+
+    dri_bo_unreference(pp_context->idrt.bo);
+    bo = dri_bo_alloc(i965->intel.bufmgr, 
+                      "interface discriptor", 
+                      sizeof(struct gen6_interface_descriptor_data), 
+                      4096);
+    assert(bo);
+    pp_context->idrt.bo = bo;
+    pp_context->idrt.num_interface_descriptors = 0;
+
+    dri_bo_unreference(pp_context->sampler_state_table.bo);
+    bo = dri_bo_alloc(i965->intel.bufmgr, 
+                      "sampler state table", 
+                      4096,
+                      4096);
+    assert(bo);
+    dri_bo_map(bo, True);
+    memset(bo->virtual, 0, bo->size);
+    dri_bo_unmap(bo);
+    pp_context->sampler_state_table.bo = bo;
+
+    dri_bo_unreference(pp_context->sampler_state_table.bo_8x8);
+    bo = dri_bo_alloc(i965->intel.bufmgr, 
+                      "sampler 8x8 state ",
+                      4096,
+                      4096);
+    assert(bo);
+    pp_context->sampler_state_table.bo_8x8 = bo;
+
+    dri_bo_unreference(pp_context->sampler_state_table.bo_8x8_uv);
+    bo = dri_bo_alloc(i965->intel.bufmgr, 
+                      "sampler 8x8 state ",
+                      4096,
+                      4096);
+    assert(bo);
+    pp_context->sampler_state_table.bo_8x8_uv = bo;
+
+    dri_bo_unreference(pp_context->vfe_state.bo);
+    bo = dri_bo_alloc(i965->intel.bufmgr, 
+                      "vfe state", 
+                      sizeof(struct i965_vfe_state), 
+                      4096);
+    assert(bo);
+    pp_context->vfe_state.bo = bo;
+    
+    for (i = 0; i < MAX_PP_SURFACES; i++) {
+        dri_bo_unreference(pp_context->surfaces[i].ss_bo);
+        pp_context->surfaces[i].ss_bo = NULL;
+
+        dri_bo_unreference(pp_context->surfaces[i].s_bo);
+        pp_context->surfaces[i].s_bo = NULL;
+    }
+
+    memset(&pp_static_parameter, 0, sizeof(pp_static_parameter));
+    memset(&pp_inline_parameter, 0, sizeof(pp_inline_parameter));
+    assert(pp_index >= PP_NULL && pp_index < NUM_PP_MODULES);
+    assert(pp_modules);
+    pp_context->current_pp = pp_index;
+    pp_module = &pp_modules[pp_index];
+    
+    if (pp_module->initialize)
+        pp_module->initialize(ctx, surface, input, srcw, srch, destw, desth);
+}
+
+static void
+gen6_pp_binding_table(struct i965_post_processing_context *pp_context)
+{
+    unsigned int *binding_table;
+    dri_bo *bo = pp_context->binding_table.bo;
+    int i;
+
+    dri_bo_map(bo, 1);
+    assert(bo->virtual);
+    binding_table = bo->virtual;
+    memset(binding_table, 0, bo->size);
+
+    for (i = 0; i < MAX_PP_SURFACES; i++) {
+        if (pp_context->surfaces[i].ss_bo) {
+            assert(pp_context->surfaces[i].s_bo);
+
+            binding_table[i] = pp_context->surfaces[i].ss_bo->offset;
+            dri_bo_emit_reloc(bo,
+                              I915_GEM_DOMAIN_INSTRUCTION, 0,
+                              0,
+                              i * sizeof(*binding_table),
+                              pp_context->surfaces[i].ss_bo);
+        }
+    
+    }
+
+    dri_bo_unmap(bo);
+}
+
+static void
+gen6_pp_interface_descriptor_table(struct i965_post_processing_context *pp_context)
+{
+    struct gen6_interface_descriptor_data *desc;
+    dri_bo *bo;
+    int pp_index = pp_context->current_pp;
+
+    bo = pp_context->idrt.bo;
+    dri_bo_map(bo, True);
+    assert(bo->virtual);
+    desc = bo->virtual;
+    memset(desc, 0, sizeof(*desc));
+    desc->desc0.kernel_start_pointer = 
+        pp_modules[pp_index].bo->offset >> 6; /* reloc */
+    desc->desc1.single_program_flow = 1;
+    desc->desc1.floating_point_mode = FLOATING_POINT_IEEE_754;
+    desc->desc2.sampler_count = 1;      /* 1 - 4 samplers used */
+    desc->desc2.sampler_state_pointer = 
+        pp_context->sampler_state_table.bo->offset >> 5;
+    desc->desc3.binding_table_entry_count = 0;
+    desc->desc3.binding_table_pointer = 
+        pp_context->binding_table.bo->offset >> 5; /*reloc */
+    desc->desc4.constant_urb_entry_read_offset = 0;
+    desc->desc4.constant_urb_entry_read_length = 4; /* grf 1-4 */
+
+    dri_bo_emit_reloc(bo,
+                      I915_GEM_DOMAIN_INSTRUCTION, 0,
+                      0,
+                      offsetof(struct gen6_interface_descriptor_data, desc0),
+                      pp_modules[pp_index].bo);
+
+    dri_bo_emit_reloc(bo,
+                      I915_GEM_DOMAIN_INSTRUCTION, 0,
+                      desc->desc2.sampler_count << 2,
+                      offsetof(struct gen6_interface_descriptor_data, desc2),
+                      pp_context->sampler_state_table.bo);
+
+    dri_bo_emit_reloc(bo,
+                      I915_GEM_DOMAIN_INSTRUCTION, 0,
+                      desc->desc3.binding_table_entry_count,
+                      offsetof(struct gen6_interface_descriptor_data, desc3),
+                      pp_context->binding_table.bo);
+
+    dri_bo_unmap(bo);
+    pp_context->idrt.num_interface_descriptors++;
+}
+
+static void
+gen6_pp_upload_constants(struct i965_post_processing_context *pp_context)
+{
+    unsigned char *constant_buffer;
+
+    assert(sizeof(pp_static_parameter) == 128);
+    dri_bo_map(pp_context->curbe.bo, 1);
+    assert(pp_context->curbe.bo->virtual);
+    constant_buffer = pp_context->curbe.bo->virtual;
+    memcpy(constant_buffer, &pp_static_parameter, sizeof(pp_static_parameter));
+    dri_bo_unmap(pp_context->curbe.bo);
+}
+
+static void
+gen6_pp_states_setup(VADriverContextP ctx)
+{
+    struct i965_driver_data *i965 = i965_driver_data(ctx);
+    struct i965_post_processing_context *pp_context = i965->pp_context;
+
+    gen6_pp_binding_table(pp_context);
+    gen6_pp_interface_descriptor_table(pp_context);
+    gen6_pp_upload_constants(pp_context);
+}
+
+static void
+gen6_pp_pipeline_select(VADriverContextP ctx)
+{
+    BEGIN_BATCH(ctx, 1);
+    OUT_BATCH(ctx, CMD_PIPELINE_SELECT | PIPELINE_SELECT_MEDIA);
+    ADVANCE_BATCH(ctx);
+}
+
+static void
+gen6_pp_state_base_address(VADriverContextP ctx)
+{
+    BEGIN_BATCH(ctx, 10);
+    OUT_BATCH(ctx, CMD_STATE_BASE_ADDRESS | (10 - 2));
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    OUT_BATCH(ctx, 0 | BASE_ADDRESS_MODIFY);
+    ADVANCE_BATCH(ctx);
+}
+
+static void
+gen6_pp_vfe_state(VADriverContextP ctx, struct i965_post_processing_context *pp_context)
+{
+    BEGIN_BATCH(ctx, 8);
+    OUT_BATCH(ctx, CMD_MEDIA_VFE_STATE | (8 - 2));
+    OUT_BATCH(ctx, 0);
+    OUT_BATCH(ctx,
+              (pp_context->urb.num_vfe_entries - 1) << 16 |
+              pp_context->urb.num_vfe_entries << 8);
+    OUT_BATCH(ctx, 0);
+    OUT_BATCH(ctx,
+              (pp_context->urb.size_vfe_entry * 2) << 16 |  /* in 256 bits unit */
+              (pp_context->urb.size_cs_entry * pp_context->urb.num_cs_entries * 2 - 1));            /* in 256 bits unit */
+    OUT_BATCH(ctx, 0);
+    OUT_BATCH(ctx, 0);
+    OUT_BATCH(ctx, 0);
+    ADVANCE_BATCH(ctx);
+}
+
+static void
+gen6_pp_curbe_load(VADriverContextP ctx, struct i965_post_processing_context *pp_context)
+{
+    assert(pp_context->urb.size_cs_entry * pp_context->urb.num_cs_entries * 512 <= pp_context->curbe.bo->size);
+
+    BEGIN_BATCH(ctx, 4);
+    OUT_BATCH(ctx, CMD_MEDIA_CURBE_LOAD | (4 - 2));
+    OUT_BATCH(ctx, 0);
+    OUT_BATCH(ctx,
+              pp_context->urb.size_cs_entry * pp_context->urb.num_cs_entries * 512);
+    OUT_RELOC(ctx, 
+              pp_context->curbe.bo,
+              I915_GEM_DOMAIN_INSTRUCTION, 0,
+              0);
+    ADVANCE_BATCH(ctx);
+}
+
+static void
+gen6_interface_descriptor_load(VADriverContextP ctx, struct i965_post_processing_context *pp_context)
+{
+    BEGIN_BATCH(ctx, 4);
+    OUT_BATCH(ctx, CMD_MEDIA_INTERFACE_DESCRIPTOR_LOAD | (4 - 2));
+    OUT_BATCH(ctx, 0);
+    OUT_BATCH(ctx,
+              pp_context->idrt.num_interface_descriptors * sizeof(struct gen6_interface_descriptor_data));
+    OUT_RELOC(ctx, 
+              pp_context->idrt.bo,
+              I915_GEM_DOMAIN_INSTRUCTION, 0,
+              0);
+    ADVANCE_BATCH(ctx);
+}
+
+static void
+gen6_pp_object_walker(VADriverContextP ctx, struct i965_post_processing_context *pp_context)
+{
+    int x, x_steps, y, y_steps;
+
+    x_steps = pp_context->pp_x_steps(&pp_context->private_context);
+    y_steps = pp_context->pp_y_steps(&pp_context->private_context);
+
+    for (y = 0; y < y_steps; y++) {
+        for (x = 0; x < x_steps; x++) {
+            if (!pp_context->pp_set_block_parameter(&pp_context->private_context, x, y)) {
+                BEGIN_BATCH(ctx, 22);
+                OUT_BATCH(ctx, CMD_MEDIA_OBJECT | 20);
+                OUT_BATCH(ctx, 0);
+                OUT_BATCH(ctx, 0); /* no indirect data */
+                OUT_BATCH(ctx, 0);
+                OUT_BATCH(ctx, 0); /* scoreboard */
+                OUT_BATCH(ctx, 0);
+
+                /* inline data grf 5-6 */
+                assert(sizeof(pp_inline_parameter) == 64);
+                intel_batchbuffer_data(ctx, &pp_inline_parameter, sizeof(pp_inline_parameter));
+
+                ADVANCE_BATCH(ctx);
+            }
+        }
+    }
+}
+
+static void
+gen6_pp_pipeline_setup(VADriverContextP ctx)
+{
+    struct i965_driver_data *i965 = i965_driver_data(ctx);
+    struct i965_post_processing_context *pp_context = i965->pp_context;
+
+    intel_batchbuffer_start_atomic(ctx, 0x1000);
+    intel_batchbuffer_emit_mi_flush(ctx);
+    gen6_pp_pipeline_select(ctx);
+    gen6_pp_curbe_load(ctx, pp_context);
+    gen6_interface_descriptor_load(ctx, pp_context);
+    gen6_pp_state_base_address(ctx);
+    gen6_pp_vfe_state(ctx, pp_context);
+    gen6_pp_object_walker(ctx, pp_context);
+    intel_batchbuffer_end_atomic(ctx);
+}
+
+static void
+gen6_post_processing(VADriverContextP ctx,
+                     VASurfaceID surface,
+                     int input,
+                     short srcx,
+                     short srcy,
+                     unsigned short srcw,
+                     unsigned short srch,
+                     short destx,
+                     short desty,
+                     unsigned short destw,
+                     unsigned short desth,
+                     int pp_index)
+{
+    gen6_pp_initialize(ctx, surface, input,
+                       srcx, srcy, srcw, srch,
+                       destx, desty, destw, desth,
+                       pp_index);
+    gen6_pp_states_setup(ctx);
+    gen6_pp_pipeline_setup(ctx);
+}
+
+static void
 i965_post_processing_internal(VADriverContextP ctx,
                               VASurfaceID surface,
                               int input,
@@ -1900,12 +2397,18 @@ i965_post_processing_internal(VADriverContextP ctx,
                               unsigned short desth,
                               int pp_index)
 {
-    ironlake_pp_initialize(ctx, surface, input,
-                           srcx, srcy, srcw, srch,
-                           destx, desty, destw, desth,
-                           pp_index);
-    ironlake_pp_states_setup(ctx);
-    ironlake_pp_pipeline_setup(ctx);
+    struct i965_driver_data *i965 = i965_driver_data(ctx);
+
+    if (IS_GEN6(i965->intel.device_id))
+        gen6_post_processing(ctx, surface, input,
+                             srcx, srcy, srcw, srch,
+                             destx, desty, destw, desth,
+                             pp_index);
+    else
+        ironlake_post_processing(ctx, surface, input,
+                                 srcx, srcy, srcw, srch,
+                                 destx, desty, destw, desth,
+                                 pp_index);
 }
 
 void
@@ -1923,21 +2426,21 @@ i965_post_processing(VADriverContextP ctx,
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
 
-    if (IS_IRONLAKE(i965->intel.device_id)) {
+    if (HAS_PP(i965)) {
         /* Currently only support post processing for NV12 surface */
         if (i965->render_state.interleaved_uv) {
-            int input = 0;
+            int internal_input = 0;
 
             if (flag & I965_PP_FLAG_DEINTERLACING) {
-                i965_post_processing_internal(ctx, surface, input,
+                i965_post_processing_internal(ctx, surface, internal_input,
                                               srcx, srcy, srcw, srch,
                                               destx, desty, destw, desth,
                                               PP_NV12_DNDI);
-                input = 1;
+                internal_input = 1;
             }
 
             if (flag & I965_PP_FLAG_AVS) {
-                i965_post_processing_internal(ctx, surface, input,
+                i965_post_processing_internal(ctx, surface, internal_input,
                                               srcx, srcy, srcw, srch,
                                               destx, desty, destw, desth,
                                               PP_NV12_AVS);
@@ -1946,83 +2449,106 @@ i965_post_processing(VADriverContextP ctx,
     }
 }       
 
-void
-i965_post_processing_once_init(VADriverContextP ctx)
+Bool
+i965_post_processing_terminate(VADriverContextP ctx)
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
+    struct i965_post_processing_context *pp_context = i965->pp_context;
     int i;
 
-    pp_context->urb.size = URB_SIZE((&i965->intel));
-    pp_context->urb.num_vfe_entries = 32;
-    pp_context->urb.size_vfe_entry = 1;
-    pp_context->urb.num_cs_entries = 1;
-    pp_context->urb.size_cs_entry = 2;
-    pp_context->urb.vfe_start = 0;
-    pp_context->urb.cs_start = pp_context->urb.vfe_start + 
-        pp_context->urb.num_vfe_entries * pp_context->urb.size_vfe_entry;
-    assert(pp_context->urb.cs_start + 
-           pp_context->urb.num_cs_entries * pp_context->urb.size_cs_entry <= URB_SIZE((&i965->intel)));
-
-    if (IS_IRONLAKE(i965->intel.device_id)) {
-        pp_modules = pp_modules_gen5;
-    }
+    if (HAS_PP(i965)) {
+        if (pp_context) {
+            dri_bo_unreference(pp_context->curbe.bo);
+            pp_context->curbe.bo = NULL;
 
-    for (i = 0; i < NUM_PP_MODULES && pp_modules; i++) {
-        struct pp_module *pp_module = &pp_modules[i];
-        pp_module->bo = dri_bo_alloc(i965->intel.bufmgr,
-                                     pp_module->name,
-                                     pp_module->size,
-                                     4096);
-        assert(pp_module->bo);
-        dri_bo_subdata(pp_module->bo, 0, pp_module->size, pp_module->bin);
-    }
-}
+            for (i = 0; i < MAX_PP_SURFACES; i++) {
+                dri_bo_unreference(pp_context->surfaces[i].ss_bo);
+                pp_context->surfaces[i].ss_bo = NULL;
 
-Bool
-i965_post_processing_terminate(VADriverContextP ctx)
-{
-    struct i965_driver_data *i965 = i965_driver_data(ctx);
-    struct i965_post_processing_context *pp_context = &i965->render_state.pp_context;
-    int i;
+                dri_bo_unreference(pp_context->surfaces[i].s_bo);
+                pp_context->surfaces[i].s_bo = NULL;
+            }
 
-    dri_bo_unreference(pp_context->curbe.bo);
-    pp_context->curbe.bo = NULL;
+            dri_bo_unreference(pp_context->sampler_state_table.bo);
+            pp_context->sampler_state_table.bo = NULL;
 
-    for (i = 0; i < MAX_PP_SURFACES; i++) {
-        dri_bo_unreference(pp_context->surfaces[i].ss_bo);
-        pp_context->surfaces[i].ss_bo = NULL;
+            dri_bo_unreference(pp_context->sampler_state_table.bo_8x8);
+            pp_context->sampler_state_table.bo_8x8 = NULL;
 
-        dri_bo_unreference(pp_context->surfaces[i].s_bo);
-        pp_context->surfaces[i].s_bo = NULL;
-    }
+            dri_bo_unreference(pp_context->sampler_state_table.bo_8x8_uv);
+            pp_context->sampler_state_table.bo_8x8_uv = NULL;
 
-    dri_bo_unreference(pp_context->sampler_state_table.bo);
-    pp_context->sampler_state_table.bo = NULL;
+            dri_bo_unreference(pp_context->binding_table.bo);
+            pp_context->binding_table.bo = NULL;
 
-    dri_bo_unreference(pp_context->sampler_state_table.bo_8x8);
-    pp_context->sampler_state_table.bo_8x8 = NULL;
+            dri_bo_unreference(pp_context->idrt.bo);
+            pp_context->idrt.bo = NULL;
+            pp_context->idrt.num_interface_descriptors = 0;
 
-    dri_bo_unreference(pp_context->sampler_state_table.bo_8x8_uv);
-    pp_context->sampler_state_table.bo_8x8_uv = NULL;
+            dri_bo_unreference(pp_context->vfe_state.bo);
+            pp_context->vfe_state.bo = NULL;
 
-    dri_bo_unreference(pp_context->binding_table.bo);
-    pp_context->binding_table.bo = NULL;
+            dri_bo_unreference(pp_context->stmm.bo);
+            pp_context->stmm.bo = NULL;
 
-    dri_bo_unreference(pp_context->idrt.bo);
-    pp_context->idrt.bo = NULL;
+            free(pp_context);
+        }
 
-    dri_bo_unreference(pp_context->vfe_state.bo);
-    pp_context->vfe_state.bo = NULL;
+        i965->pp_context = NULL;
 
-    dri_bo_unreference(pp_context->stmm.bo);
-    pp_context->stmm.bo = NULL;
+        for (i = 0; i < NUM_PP_MODULES && pp_modules; i++) {
+            struct pp_module *pp_module = &pp_modules[i];
 
-    for (i = 0; i < NUM_PP_MODULES && pp_modules; i++) {
-        struct pp_module *pp_module = &pp_modules[i];
+            dri_bo_unreference(pp_module->bo);
+            pp_module->bo = NULL;
+        }
+    }
 
-        dri_bo_unreference(pp_module->bo);
-        pp_module->bo = NULL;
+    return True;
+}
+
+Bool
+i965_post_processing_init(VADriverContextP ctx)
+{
+    struct i965_driver_data *i965 = i965_driver_data(ctx);
+    struct i965_post_processing_context *pp_context = i965->pp_context;
+    int i;
+
+    if (HAS_PP(i965)) {
+        if (pp_context == NULL) {
+            pp_context = calloc(1, sizeof(*pp_context));
+            i965->pp_context = pp_context;
+        }
+
+        pp_context->urb.size = URB_SIZE((&i965->intel));
+        pp_context->urb.num_vfe_entries = 32;
+        pp_context->urb.size_vfe_entry = 1;     /* in 512 bits unit */
+        pp_context->urb.num_cs_entries = 1;
+        pp_context->urb.size_cs_entry = 2;      /* in 512 bits unit */
+        pp_context->urb.vfe_start = 0;
+        pp_context->urb.cs_start = pp_context->urb.vfe_start + 
+            pp_context->urb.num_vfe_entries * pp_context->urb.size_vfe_entry;
+        assert(pp_context->urb.cs_start + 
+               pp_context->urb.num_cs_entries * pp_context->urb.size_cs_entry <= URB_SIZE((&i965->intel)));
+
+        assert(NUM_PP_MODULES == ARRAY_ELEMS(pp_modules_gen6));
+
+        if (IS_GEN6(i965->intel.device_id))
+            pp_modules = pp_modules_gen6;
+        else if (IS_IRONLAKE(i965->intel.device_id)) {
+            pp_modules = pp_modules_gen5;
+        }
+
+        for (i = 0; i < NUM_PP_MODULES && pp_modules; i++) {
+            struct pp_module *pp_module = &pp_modules[i];
+            dri_bo_unreference(pp_module->bo);
+            pp_module->bo = dri_bo_alloc(i965->intel.bufmgr,
+                                         pp_module->name,
+                                         pp_module->size,
+                                         4096);
+            assert(pp_module->bo);
+            dri_bo_subdata(pp_module->bo, 0, pp_module->size, pp_module->bin);
+        }
     }
 
     return True;
diff --git a/i965_drv_video/i965_post_processing.h b/i965_drv_video/i965_post_processing.h
index 360ded4..fa2d701 100644
--- a/i965_drv_video/i965_post_processing.h
+++ b/i965_drv_video/i965_post_processing.h
@@ -89,6 +89,7 @@ struct i965_post_processing_context
 
     struct {
         dri_bo *bo;
+        int num_interface_descriptors;
     } idrt;
 
     struct {
@@ -142,9 +143,9 @@ i965_post_processing(VADriverContextP ctx,
                      unsigned short destw,
                      unsigned short desth,
                      unsigned int pp_index);
-void
-i965_post_processing_once_init(VADriverContextP ctx);
 Bool
 i965_post_processing_terminate(VADriverContextP ctx);
+Bool
+i965_post_processing_init(VADriverContextP ctx);
 
 #endif /* __I965_POST_PROCESSING_H__ */
diff --git a/i965_drv_video/i965_render.c b/i965_drv_video/i965_render.c
index 91d183a..7f94a2b 100644
--- a/i965_drv_video/i965_render.c
+++ b/i965_drv_video/i965_render.c
@@ -685,10 +685,16 @@ i965_render_src_surfaces_state(VADriverContextP ctx,
         i965_render_src_surface_state(ctx, 3, region, w * h, rw / 2, rh / 2, w, I965_SURFACEFORMAT_R8G8_UNORM); /* UV */
         i965_render_src_surface_state(ctx, 4, region, w * h, rw / 2, rh / 2, w, I965_SURFACEFORMAT_R8G8_UNORM);
     } else {
-        i965_render_src_surface_state(ctx, 3, region, w * h, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM); /* U */
-        i965_render_src_surface_state(ctx, 4, region, w * h, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM);
-        i965_render_src_surface_state(ctx, 5, region, w * h + w * h / 4, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM);     /* V */
-        i965_render_src_surface_state(ctx, 6, region, w * h + w * h / 4, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM);
+        int u3 = 3, u4 = 4, v5 = 5, v6 = 6;
+
+        if (obj_surface->flags & SURFACE_DERIVED) {
+            u3 = 5, u4 = 6, v5 = 3, v6 = 4;
+        }
+        
+        i965_render_src_surface_state(ctx, u3, region, w * h, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM); /* U */
+        i965_render_src_surface_state(ctx, u4, region, w * h, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM);
+        i965_render_src_surface_state(ctx, v5, region, w * h + w * h / 4, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM);     /* V */
+        i965_render_src_surface_state(ctx, v6, region, w * h + w * h / 4, rw / 2, rh / 2, w / 2, I965_SURFACEFORMAT_R8_UNORM);
     }
 }
 
@@ -1415,11 +1421,6 @@ i965_render_put_surface(VADriverContextP ctx,
                         unsigned short desth,
                         unsigned int flag)
 {
-    i965_post_processing(ctx, surface,
-                         srcx, srcy, srcw, srch,
-                         destx, desty, destw, desth,
-                         flag);
-
     i965_render_initialize(ctx);
     i965_surface_render_state_setup(ctx, surface,
                             srcx, srcy, srcw, srch,
@@ -2017,6 +2018,11 @@ intel_render_put_surface(VADriverContextP ctx,
 {
     struct i965_driver_data *i965 = i965_driver_data(ctx);
 
+    i965_post_processing(ctx, surface,
+                         srcx, srcy, srcw, srch,
+                         destx, desty, destw, desth,
+                         flag);
+
     if (IS_GEN6(i965->intel.device_id))
         gen6_render_put_surface(ctx, surface,
                                 srcx, srcy, srcw, srch,
@@ -2093,8 +2099,6 @@ i965_render_init(VADriverContextP ctx)
     assert(render_state->curbe.bo);
     render_state->curbe.upload = 0;
 
-    i965_post_processing_once_init(ctx);
-
     return True;
 }
 
@@ -2105,8 +2109,6 @@ i965_render_terminate(VADriverContextP ctx)
     struct i965_driver_data *i965 = i965_driver_data(ctx);
     struct i965_render_state *render_state = &i965->render_state;
 
-    i965_post_processing_terminate(ctx);
-
     dri_bo_unreference(render_state->curbe.bo);
     render_state->curbe.bo = NULL;
 
diff --git a/i965_drv_video/i965_structs.h b/i965_drv_video/i965_structs.h
index 5f85269..8f81b75 100644
--- a/i965_drv_video/i965_structs.h
+++ b/i965_drv_video/i965_structs.h
@@ -1065,4 +1065,67 @@ struct gen6_depth_stencil_state
     } ds2;
 };
 
+struct gen6_interface_descriptor_data
+{
+    struct {
+        unsigned int pad0:6;
+        unsigned int kernel_start_pointer:26;
+    } desc0;
+    
+    struct {
+        unsigned int pad0:7;
+        unsigned int software_exception_enable:1;
+        unsigned int pad1:3;
+        unsigned int maskstack_exception_enable:1;
+        unsigned int pad2:1;
+        unsigned int illegal_opcode_exception_enable:1;
+        unsigned int pad3:2;
+        unsigned int floating_point_mode:1;
+        unsigned int thread_priority:1;
+        unsigned int single_program_flow:1;
+        unsigned int pad4:13;
+    } desc1;
+
+    struct {
+        unsigned int pad0:2;
+        unsigned int sampler_count:3;
+        unsigned int sampler_state_pointer:27;
+    } desc2;
+
+    struct {
+        unsigned int binding_table_entry_count:5;
+        unsigned int binding_table_pointer:27;
+    } desc3;
+
+    struct {
+        unsigned int constant_urb_entry_read_offset:16;
+        unsigned int constant_urb_entry_read_length:16;
+    } desc4;
+    
+    union {
+        struct {
+            unsigned int num_threads:8;
+            unsigned int barrier_return_byte:8;
+            unsigned int shared_local_memory_size:5;
+            unsigned int barrier_enable:1;
+            unsigned int rounding_mode:2;
+            unsigned int barrier_return_grf_offset:8;
+        } gen7;
+
+        struct {
+            unsigned int barrier_id:4;
+            unsigned int pad0:28;
+        } gen6;
+    } desc5;
+
+    struct {
+        unsigned int cross_thread_constant_data_read_length:8;
+        unsigned int pad0:24;
+    } desc6;
+
+    struct {
+        unsigned int pad0;
+    } desc7;
+};
+
 #endif /* _I965_STRUCTS_H_ */
diff --git a/i965_drv_video/shaders/post_processing/Common/Multiple_Loop.asm b/i965_drv_video/shaders/post_processing/Common/Multiple_Loop.asm
index 8a9fd96..324e134 100644
--- a/i965_drv_video/shaders/post_processing/Common/Multiple_Loop.asm
+++ b/i965_drv_video/shaders/post_processing/Common/Multiple_Loop.asm
@@ -39,7 +39,7 @@ VIDEO_PROCESSING_LOOP:
 
 	// Reached multi-block width?
 	add			(1)	wORIX:w		wORIX:w		16:w
-	cmp.l.f0.1	(1)	null:w		acc0.0:w	wFRAME_ENDX:w	// acc0.0 has wORIX
+	cmp.l.f0.1	(1)	null:w		wORIX:w	wFRAME_ENDX:w	// acc0.0 has wORIX
 
 	#if defined(INC_SCALING)
 	// Update SRC_VID_H_ORI for scaling
diff --git a/i965_drv_video/shaders/post_processing/Core_Kernels/PL2_AVS_IEF_Unpack_16x8.asm b/i965_drv_video/shaders/post_processing/Core_Kernels/PL2_AVS_IEF_Unpack_16x8.asm
index 6c994c1..6e67557 100644
--- a/i965_drv_video/shaders/post_processing/Core_Kernels/PL2_AVS_IEF_Unpack_16x8.asm
+++ b/i965_drv_video/shaders/post_processing/Core_Kernels/PL2_AVS_IEF_Unpack_16x8.asm
@@ -216,24 +216,24 @@
     } 
 
     // Move 1st 8x8 words of U to dest GRF  (Copy high byte in a word)
-    mov (8) uwDEST_U(0)<1>           ubAVS_RESPONSE(4,1)<16;4,2>      
-    mov (8) uwDEST_U(1)<1>           ubAVS_RESPONSE(4,8+1)<16;4,2>    
-    mov (8) uwDEST_U(2)<1>           ubAVS_RESPONSE(5,1)<16;4,2>      
-    mov (8) uwDEST_U(3)<1>           ubAVS_RESPONSE(5,8+1)<16;4,2>    
-    mov (8) uwDEST_U(4)<1>           ubAVS_RESPONSE(8,1)<16;4,2>      
-    mov (8) uwDEST_U(5)<1>           ubAVS_RESPONSE(8,8+1)<16;4,2>    
-    mov (8) uwDEST_U(6)<1>           ubAVS_RESPONSE(9,1)<16;4,2>      
-    mov (8) uwDEST_U(7)<1>           ubAVS_RESPONSE(9,8+1)<16;4,2>    
+    mov (8) uwDEST_V(0)<1>           ubAVS_RESPONSE(4,1)<16;4,2>      
+    mov (8) uwDEST_V(1)<1>           ubAVS_RESPONSE(4,8+1)<16;4,2>    
+    mov (8) uwDEST_V(2)<1>           ubAVS_RESPONSE(5,1)<16;4,2>      
+    mov (8) uwDEST_V(3)<1>           ubAVS_RESPONSE(5,8+1)<16;4,2>    
+    mov (8) uwDEST_V(4)<1>           ubAVS_RESPONSE(8,1)<16;4,2>      
+    mov (8) uwDEST_V(5)<1>           ubAVS_RESPONSE(8,8+1)<16;4,2>    
+    mov (8) uwDEST_V(6)<1>           ubAVS_RESPONSE(9,1)<16;4,2>      
+    mov (8) uwDEST_V(7)<1>           ubAVS_RESPONSE(9,8+1)<16;4,2>    
 
     // Move 1st 8x8 words of V to dest GRF  
-    mov (8) uwDEST_V(0)<1>           ubAVS_RESPONSE(6,1)<16;4,2>      
-    mov (8) uwDEST_V(1)<1>           ubAVS_RESPONSE(6,8+1)<16;4,2>    
-    mov (8) uwDEST_V(2)<1>           ubAVS_RESPONSE(7,1)<16;4,2>      
-    mov (8) uwDEST_V(3)<1>           ubAVS_RESPONSE(7,8+1)<16;4,2>    
-    mov (8) uwDEST_V(4)<1>           ubAVS_RESPONSE(10,1)<16;4,2>     
-    mov (8) uwDEST_V(5)<1>           ubAVS_RESPONSE(10,8+1)<16;4,2>   
-    mov (8) uwDEST_V(6)<1>           ubAVS_RESPONSE(11,1)<16;4,2>     
-    mov (8) uwDEST_V(7)<1>           ubAVS_RESPONSE(11,8+1)<16;4,2>   
+    mov (8) uwDEST_U(0)<1>           ubAVS_RESPONSE(6,1)<16;4,2>      
+    mov (8) uwDEST_U(1)<1>           ubAVS_RESPONSE(6,8+1)<16;4,2>    
+    mov (8) uwDEST_U(2)<1>           ubAVS_RESPONSE(7,1)<16;4,2>      
+    mov (8) uwDEST_U(3)<1>           ubAVS_RESPONSE(7,8+1)<16;4,2>    
+    mov (8) uwDEST_U(4)<1>           ubAVS_RESPONSE(10,1)<16;4,2>     
+    mov (8) uwDEST_U(5)<1>           ubAVS_RESPONSE(10,8+1)<16;4,2>   
+    mov (8) uwDEST_U(6)<1>           ubAVS_RESPONSE(11,1)<16;4,2>     
+    mov (8) uwDEST_U(7)<1>           ubAVS_RESPONSE(11,8+1)<16;4,2>   
 
     // Move 2nd 8x8 words of Y to dest GRF at higher 8 words of each GRF.
     $for(0; <8/2; 1) {
@@ -242,24 +242,24 @@
     } 
 
     // Move 2st 8x8 words of U to dest GRF  (Copy high byte in a word)
-    mov (8) uwDEST_U(0,8)<1>         ubAVS_RESPONSE_2(4,1)<16;4,2>      
-    mov (8) uwDEST_U(1,8)<1>         ubAVS_RESPONSE_2(4,8+1)<16;4,2>    
-    mov (8) uwDEST_U(2,8)<1>         ubAVS_RESPONSE_2(5,1)<16;4,2>      
-    mov (8) uwDEST_U(3,8)<1>         ubAVS_RESPONSE_2(5,8+1)<16;4,2>    
-    mov (8) uwDEST_U(4,8)<1>         ubAVS_RESPONSE_2(8,1)<16;4,2>      
-    mov (8) uwDEST_U(5,8)<1>         ubAVS_RESPONSE_2(8,8+1)<16;4,2>    
-    mov (8) uwDEST_U(6,8)<1>         ubAVS_RESPONSE_2(9,1)<16;4,2>      
-    mov (8) uwDEST_U(7,8)<1>         ubAVS_RESPONSE_2(9,8+1)<16;4,2>    
+    mov (8) uwDEST_V(0,8)<1>         ubAVS_RESPONSE_2(4,1)<16;4,2>      
+    mov (8) uwDEST_V(1,8)<1>         ubAVS_RESPONSE_2(4,8+1)<16;4,2>    
+    mov (8) uwDEST_V(2,8)<1>         ubAVS_RESPONSE_2(5,1)<16;4,2>      
+    mov (8) uwDEST_V(3,8)<1>         ubAVS_RESPONSE_2(5,8+1)<16;4,2>    
+    mov (8) uwDEST_V(4,8)<1>         ubAVS_RESPONSE_2(8,1)<16;4,2>      
+    mov (8) uwDEST_V(5,8)<1>         ubAVS_RESPONSE_2(8,8+1)<16;4,2>    
+    mov (8) uwDEST_V(6,8)<1>         ubAVS_RESPONSE_2(9,1)<16;4,2>      
+    mov (8) uwDEST_V(7,8)<1>         ubAVS_RESPONSE_2(9,8+1)<16;4,2>    
 
     // Move 2st 8x8 words of V to dest GRF  
-    mov (8) uwDEST_V(0,8)<1>         ubAVS_RESPONSE_2(6,1)<16;4,2>      
-    mov (8) uwDEST_V(1,8)<1>         ubAVS_RESPONSE_2(6,8+1)<16;4,2>    
-    mov (8) uwDEST_V(2,8)<1>         ubAVS_RESPONSE_2(7,1)<16;4,2>      
-    mov (8) uwDEST_V(3,8)<1>         ubAVS_RESPONSE_2(7,8+1)<16;4,2>    
-    mov (8) uwDEST_V(4,8)<1>         ubAVS_RESPONSE_2(10,1)<16;4,2>     
-    mov (8) uwDEST_V(5,8)<1>         ubAVS_RESPONSE_2(10,8+1)<16;4,2>   
-    mov (8) uwDEST_V(6,8)<1>         ubAVS_RESPONSE_2(11,1)<16;4,2>     
-    mov (8) uwDEST_V(7,8)<1>         ubAVS_RESPONSE_2(11,8+1)<16;4,2>   
+    mov (8) uwDEST_U(0,8)<1>         ubAVS_RESPONSE_2(6,1)<16;4,2>      
+    mov (8) uwDEST_U(1,8)<1>         ubAVS_RESPONSE_2(6,8+1)<16;4,2>    
+    mov (8) uwDEST_U(2,8)<1>         ubAVS_RESPONSE_2(7,1)<16;4,2>      
+    mov (8) uwDEST_U(3,8)<1>         ubAVS_RESPONSE_2(7,8+1)<16;4,2>    
+    mov (8) uwDEST_U(4,8)<1>         ubAVS_RESPONSE_2(10,1)<16;4,2>     
+    mov (8) uwDEST_U(5,8)<1>         ubAVS_RESPONSE_2(10,8+1)<16;4,2>   
+    mov (8) uwDEST_U(6,8)<1>         ubAVS_RESPONSE_2(11,1)<16;4,2>     
+    mov (8) uwDEST_U(7,8)<1>         ubAVS_RESPONSE_2(11,8+1)<16;4,2>   
 #endif
 
        // Re-define new # of lines
diff --git a/i965_drv_video/shaders/post_processing/Makefile.am b/i965_drv_video/shaders/post_processing/Makefile.am
index 85c3081..e5af86b 100644
--- a/i965_drv_video/shaders/post_processing/Makefile.am
+++ b/i965_drv_video/shaders/post_processing/Makefile.am
@@ -7,12 +7,22 @@ INTEL_G4B = null.g4b
 
 INTEL_G4B_GEN5 = null.g4b.gen5
 
+INTEL_G6A = null.g6a
+
+INTEL_G6B = null.g6b
+
 INTEL_PP_G4B_GEN5 = 		\
 	nv12_avs_nv12.g4b.gen5	\
 	nv12_dndi_nv12.g4b.gen5	\
 	nv12_load_save_nv12.g4b.gen5	\
 	nv12_scaling_nv12.g4b.gen5
 
+INTEL_PP_G6B =	 		\
+	nv12_avs_nv12.g6b	\
+	nv12_dndi_nv12.g6b	\
+	nv12_load_save_nv12.g6b	\
+	nv12_scaling_nv12.g6b
+
 INTEL_PP_ASM =				\
 	Common/AYUV_Load_16x8.asm	\
 	Common/IMC3_Load_8x4.asm	\
@@ -97,10 +107,13 @@ EXTRA_DIST = $(INTEL_G4I)	\
 
 if HAVE_GEN4ASM
 
-SUFFIXES = .g4a .g4b
+SUFFIXES = .g4a .g4b .g6a .g6b
 .g4a.g4b:
 	m4 $*.g4a > $*.g4m && intel-gen4asm -o $@ $*.g4m && intel-gen4asm -g 5 -o $@.gen5 $*.g4m && rm $*.g4m
 
+.g6a.g6b:
+	m4 $< > $*.g6m && intel-gen4asm -g 6 -o $@ $*.g6m && rm $*.g6m
+
 $(INTEL_G4B): $(INTEL_G4I)
 
 $(INTEL_PP_G4B_GEN5): $(INTEL_PP_ASM)
@@ -110,10 +123,20 @@ $(INTEL_PP_G4B_GEN5): $(INTEL_PP_ASM)
 	intel-gen4asm -a -o $@ -g 5 _pp1.asm; \
 	rm _pp0.asm _pp1.asm
 
-BUILT_SOURCES= $(INTEL_G4B) $(INTEL_PP_G4B_GEN5)
+$(INTEL_PP_G6B): $(INTEL_PP_ASM)
+	@_PP_TARGET=$@; \
+	cpp -D GT -I Common/ -I Core_Kernels $${_PP_TARGET/.g6b/.asm} > _pp0.asm; \
+	../gpp.py _pp0.asm _pp1.asm;	\
+	intel-gen4asm -a -o $@ -g 6 _pp1.asm; \
+	rm _pp0.asm _pp1.asm
+
+BUILT_SOURCES= $(INTEL_G4B) $(INTEL_G6B) $(INTEL_PP_G4B_GEN5) $(INTEL_PP_G6B)
 
 clean-local:
 	-rm -f $(INTEL_G4B)
 	-rm -f $(INTEL_G4B_GEN5)
 	-rm -f $(INTEL_PP_G4B_GEN5)
+	-rm -f $(INTEL_G6B)
+	-rm -f $(INTEL_PP_G6B)
+
 endif    
diff --git a/i965_drv_video/shaders/post_processing/null.g6a b/i965_drv_video/shaders/post_processing/null.g6a
new file mode 100644
index 0000000..cde124a
--- /dev/null
+++ b/i965_drv_video/shaders/post_processing/null.g6a
@@ -0,0 +1,3 @@
+/* Just for test */
+
+send(16) 0 acc0<1>UW g0<8,8,1>UW thread_spawner(0, 0, 0) mlen 1 rlen 0 {align1 EOT};
diff --git a/i965_drv_video/shaders/post_processing/null.g6b b/i965_drv_video/shaders/post_processing/null.g6b
new file mode 100644
index 0000000..e52415c
--- /dev/null
+++ b/i965_drv_video/shaders/post_processing/null.g6b
@@ -0,0 +1 @@
+   { 0x07800031, 0x24001cc8, 0x00000000, 0x82000000 },
diff --git a/i965_drv_video/shaders/post_processing/nv12_avs_nv12.g4b.gen5 b/i965_drv_video/shaders/post_processing/nv12_avs_nv12.g4b.gen5
index b2a9e85..1fa4261 100644
--- a/i965_drv_video/shaders/post_processing/nv12_avs_nv12.g4b.gen5
+++ b/i965_drv_video/shaders/post_processing/nv12_avs_nv12.g4b.gen5
@@ -35,22 +35,22 @@
    { 0x00600001, 0x21e00229, 0x00aa0589, 0x00000000 },
    { 0x00600001, 0x22000229, 0x00aa05a1, 0x00000000 },
    { 0x00600001, 0x22200229, 0x00aa05a9, 0x00000000 },
-   { 0x00600001, 0x22400229, 0x00aa05c1, 0x00000000 },
-   { 0x00600001, 0x22600229, 0x00aa05c9, 0x00000000 },
-   { 0x00600001, 0x22800229, 0x00aa05e1, 0x00000000 },
-   { 0x00600001, 0x22a00229, 0x00aa05e9, 0x00000000 },
-   { 0x00600001, 0x22c00229, 0x00aa0641, 0x00000000 },
-   { 0x00600001, 0x22e00229, 0x00aa0649, 0x00000000 },
-   { 0x00600001, 0x23000229, 0x00aa0661, 0x00000000 },
-   { 0x00600001, 0x23200229, 0x00aa0669, 0x00000000 },
-   { 0x00600001, 0x23400229, 0x00aa0601, 0x00000000 },
-   { 0x00600001, 0x23600229, 0x00aa0609, 0x00000000 },
-   { 0x00600001, 0x23800229, 0x00aa0621, 0x00000000 },
-   { 0x00600001, 0x23a00229, 0x00aa0629, 0x00000000 },
-   { 0x00600001, 0x23c00229, 0x00aa0681, 0x00000000 },
-   { 0x00600001, 0x23e00229, 0x00aa0689, 0x00000000 },
-   { 0x00600001, 0x24000229, 0x00aa06a1, 0x00000000 },
-   { 0x00600001, 0x24200229, 0x00aa06a9, 0x00000000 },
+   { 0x00600001, 0x23400229, 0x00aa05c1, 0x00000000 },
+   { 0x00600001, 0x23600229, 0x00aa05c9, 0x00000000 },
+   { 0x00600001, 0x23800229, 0x00aa05e1, 0x00000000 },
+   { 0x00600001, 0x23a00229, 0x00aa05e9, 0x00000000 },
+   { 0x00600001, 0x23c00229, 0x00aa0641, 0x00000000 },
+   { 0x00600001, 0x23e00229, 0x00aa0649, 0x00000000 },
+   { 0x00600001, 0x24000229, 0x00aa0661, 0x00000000 },
+   { 0x00600001, 0x24200229, 0x00aa0669, 0x00000000 },
+   { 0x00600001, 0x22400229, 0x00aa0601, 0x00000000 },
+   { 0x00600001, 0x22600229, 0x00aa0609, 0x00000000 },
+   { 0x00600001, 0x22800229, 0x00aa0621, 0x00000000 },
+   { 0x00600001, 0x22a00229, 0x00aa0629, 0x00000000 },
+   { 0x00600001, 0x22c00229, 0x00aa0681, 0x00000000 },
+   { 0x00600001, 0x22e00229, 0x00aa0689, 0x00000000 },
+   { 0x00600001, 0x23000229, 0x00aa06a1, 0x00000000 },
+   { 0x00600001, 0x23200229, 0x00aa06a9, 0x00000000 },
    { 0x00600001, 0x21500229, 0x00aa0741, 0x00000000 },
    { 0x00600001, 0x21700229, 0x00aa0749, 0x00000000 },
    { 0x00600001, 0x21900229, 0x00aa0761, 0x00000000 },
@@ -59,22 +59,22 @@
    { 0x00600001, 0x21f00229, 0x00aa0789, 0x00000000 },
    { 0x00600001, 0x22100229, 0x00aa07a1, 0x00000000 },
    { 0x00600001, 0x22300229, 0x00aa07a9, 0x00000000 },
-   { 0x00600001, 0x22500229, 0x00aa07c1, 0x00000000 },
-   { 0x00600001, 0x22700229, 0x00aa07c9, 0x00000000 },
-   { 0x00600001, 0x22900229, 0x00aa07e1, 0x00000000 },
-   { 0x00600001, 0x22b00229, 0x00aa07e9, 0x00000000 },
-   { 0x00600001, 0x22d00229, 0x00aa0841, 0x00000000 },
-   { 0x00600001, 0x22f00229, 0x00aa0849, 0x00000000 },
-   { 0x00600001, 0x23100229, 0x00aa0861, 0x00000000 },
-   { 0x00600001, 0x23300229, 0x00aa0869, 0x00000000 },
-   { 0x00600001, 0x23500229, 0x00aa0801, 0x00000000 },
-   { 0x00600001, 0x23700229, 0x00aa0809, 0x00000000 },
-   { 0x00600001, 0x23900229, 0x00aa0821, 0x00000000 },
-   { 0x00600001, 0x23b00229, 0x00aa0829, 0x00000000 },
-   { 0x00600001, 0x23d00229, 0x00aa0881, 0x00000000 },
-   { 0x00600001, 0x23f00229, 0x00aa0889, 0x00000000 },
-   { 0x00600001, 0x24100229, 0x00aa08a1, 0x00000000 },
-   { 0x00600001, 0x24300229, 0x00aa08a9, 0x00000000 },
+   { 0x00600001, 0x23500229, 0x00aa07c1, 0x00000000 },
+   { 0x00600001, 0x23700229, 0x00aa07c9, 0x00000000 },
+   { 0x00600001, 0x23900229, 0x00aa07e1, 0x00000000 },
+   { 0x00600001, 0x23b00229, 0x00aa07e9, 0x00000000 },
+   { 0x00600001, 0x23d00229, 0x00aa0841, 0x00000000 },
+   { 0x00600001, 0x23f00229, 0x00aa0849, 0x00000000 },
+   { 0x00600001, 0x24100229, 0x00aa0861, 0x00000000 },
+   { 0x00600001, 0x24300229, 0x00aa0869, 0x00000000 },
+   { 0x00600001, 0x22500229, 0x00aa0801, 0x00000000 },
+   { 0x00600001, 0x22700229, 0x00aa0809, 0x00000000 },
+   { 0x00600001, 0x22900229, 0x00aa0821, 0x00000000 },
+   { 0x00600001, 0x22b00229, 0x00aa0829, 0x00000000 },
+   { 0x00600001, 0x22d00229, 0x00aa0881, 0x00000000 },
+   { 0x00600001, 0x22f00229, 0x00aa0889, 0x00000000 },
+   { 0x00600001, 0x23100229, 0x00aa08a1, 0x00000000 },
+   { 0x00600001, 0x23300229, 0x00aa08a9, 0x00000000 },
    { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
    { 0x00200001, 0x202001a6, 0x004500a0, 0x00000000 },
    { 0x00000001, 0x20280062, 0x00000000, 0x0007000f },
@@ -90,7 +90,7 @@
    { 0x00000001, 0x21080061, 0x00000000, 0x0007000f },
    { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
    { 0x00000001, 0x26020228, 0x000000ba, 0x00000000 },
-   { 0x00610001, 0x24400129, 0x028d00b8, 0x00000000 },
+   { 0x00610001, 0x24400129, 0x020000b8, 0x00000000 },
    { 0x00710001, 0x24400169, 0x02000000, 0x00000000 },
    { 0x00000001, 0x24600061, 0x00000000, 0x00040001 },
    { 0x00000001, 0x24640061, 0x00000000, 0x00400010 },
@@ -144,7 +144,7 @@
    { 0x01600031, 0x20000c04, 0x508d0000, 0x06082008 },
    { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
    { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
-   { 0x05000010, 0x2000358c, 0x02210400, 0x00000084 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
    { 0x00000041, 0x24407fbd, 0x000000bc, 0x41800000 },
    { 0x00000040, 0x20a477bd, 0x00000440, 0x000000a4 },
    { 0x00010220, 0x34001c00, 0x00001400, 0x0000000e },
diff --git a/i965_drv_video/shaders/post_processing/nv12_avs_nv12.g6b b/i965_drv_video/shaders/post_processing/nv12_avs_nv12.g6b
new file mode 100644
index 0000000..7e1dfc3
--- /dev/null
+++ b/i965_drv_video/shaders/post_processing/nv12_avs_nv12.g6b
@@ -0,0 +1,235 @@
+   { 0x00600001, 0x20e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000021, 0x008d0000, 0x00000000 },
+   { 0x00000441, 0x20842e2d, 0x000000b7, 0x00100010 },
+   { 0x00000c01, 0x2086022d, 0x000000bb, 0x00000000 },
+   { 0x00000801, 0x208a01ad, 0x000000a0, 0x00000000 },
+   { 0x00200001, 0x209403bd, 0x006600a4, 0x00000000 },
+   { 0x00000040, 0x208435ad, 0x00000084, 0x000000a0 },
+   { 0x01000005, 0x20002d2c, 0x00000088, 0x80008000 },
+   { 0x00010001, 0x20c003fd, 0x00000000, 0x00000000 },
+   { 0x00000001, 0x212003bd, 0x000000c0, 0x00000000 },
+   { 0x00000001, 0x212403bd, 0x000000bc, 0x00000000 },
+   { 0x00000001, 0x213403bd, 0x00000038, 0x00000000 },
+   { 0x00200001, 0x612803bd, 0x004500a4, 0x00000000 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0000d000 },
+   { 0x00800001, 0x20000022, 0x008d0100, 0x00000000 },
+   { 0x02000031, 0x25401cc9, 0x00000000, 0x044bb401 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0000a000 },
+   { 0x00800001, 0x20400022, 0x008d0100, 0x00000000 },
+   { 0x02000031, 0x25c01cc9, 0x00000040, 0x048bb802 },
+   { 0x00000001, 0x240803bc, 0x000000a4, 0x00000000 },
+   { 0x00000048, 0x24087fbc, 0x000000bc, 0x41000000 },
+   { 0x00000048, 0x21287fbd, 0x000000c0, 0x41e00000 },
+   { 0x00000001, 0x240403bc, 0x000000bc, 0x00000000 },
+   { 0x00000048, 0x21247fbd, 0x000000c0, 0x41000000 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0000d000 },
+   { 0x00800001, 0x20000022, 0x008d0100, 0x00000000 },
+   { 0x02000031, 0x27401cc9, 0x00000000, 0x044bb401 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0000a000 },
+   { 0x00800001, 0x20400022, 0x008d0100, 0x00000000 },
+   { 0x02000031, 0x27c01cc9, 0x00000040, 0x048bb802 },
+   { 0x00600001, 0x21400229, 0x00aa0541, 0x00000000 },
+   { 0x00600001, 0x21600229, 0x00aa0549, 0x00000000 },
+   { 0x00600001, 0x21800229, 0x00aa0561, 0x00000000 },
+   { 0x00600001, 0x21a00229, 0x00aa0569, 0x00000000 },
+   { 0x00600001, 0x21c00229, 0x00aa0581, 0x00000000 },
+   { 0x00600001, 0x21e00229, 0x00aa0589, 0x00000000 },
+   { 0x00600001, 0x22000229, 0x00aa05a1, 0x00000000 },
+   { 0x00600001, 0x22200229, 0x00aa05a9, 0x00000000 },
+   { 0x00600001, 0x23400229, 0x00aa05c1, 0x00000000 },
+   { 0x00600001, 0x23600229, 0x00aa05c9, 0x00000000 },
+   { 0x00600001, 0x23800229, 0x00aa05e1, 0x00000000 },
+   { 0x00600001, 0x23a00229, 0x00aa05e9, 0x00000000 },
+   { 0x00600001, 0x23c00229, 0x00aa0641, 0x00000000 },
+   { 0x00600001, 0x23e00229, 0x00aa0649, 0x00000000 },
+   { 0x00600001, 0x24000229, 0x00aa0661, 0x00000000 },
+   { 0x00600001, 0x24200229, 0x00aa0669, 0x00000000 },
+   { 0x00600001, 0x22400229, 0x00aa0601, 0x00000000 },
+   { 0x00600001, 0x22600229, 0x00aa0609, 0x00000000 },
+   { 0x00600001, 0x22800229, 0x00aa0621, 0x00000000 },
+   { 0x00600001, 0x22a00229, 0x00aa0629, 0x00000000 },
+   { 0x00600001, 0x22c00229, 0x00aa0681, 0x00000000 },
+   { 0x00600001, 0x22e00229, 0x00aa0689, 0x00000000 },
+   { 0x00600001, 0x23000229, 0x00aa06a1, 0x00000000 },
+   { 0x00600001, 0x23200229, 0x00aa06a9, 0x00000000 },
+   { 0x00600001, 0x21500229, 0x00aa0741, 0x00000000 },
+   { 0x00600001, 0x21700229, 0x00aa0749, 0x00000000 },
+   { 0x00600001, 0x21900229, 0x00aa0761, 0x00000000 },
+   { 0x00600001, 0x21b00229, 0x00aa0769, 0x00000000 },
+   { 0x00600001, 0x21d00229, 0x00aa0781, 0x00000000 },
+   { 0x00600001, 0x21f00229, 0x00aa0789, 0x00000000 },
+   { 0x00600001, 0x22100229, 0x00aa07a1, 0x00000000 },
+   { 0x00600001, 0x22300229, 0x00aa07a9, 0x00000000 },
+   { 0x00600001, 0x23500229, 0x00aa07c1, 0x00000000 },
+   { 0x00600001, 0x23700229, 0x00aa07c9, 0x00000000 },
+   { 0x00600001, 0x23900229, 0x00aa07e1, 0x00000000 },
+   { 0x00600001, 0x23b00229, 0x00aa07e9, 0x00000000 },
+   { 0x00600001, 0x23d00229, 0x00aa0841, 0x00000000 },
+   { 0x00600001, 0x23f00229, 0x00aa0849, 0x00000000 },
+   { 0x00600001, 0x24100229, 0x00aa0861, 0x00000000 },
+   { 0x00600001, 0x24300229, 0x00aa0869, 0x00000000 },
+   { 0x00600001, 0x22500229, 0x00aa0801, 0x00000000 },
+   { 0x00600001, 0x22700229, 0x00aa0809, 0x00000000 },
+   { 0x00600001, 0x22900229, 0x00aa0821, 0x00000000 },
+   { 0x00600001, 0x22b00229, 0x00aa0829, 0x00000000 },
+   { 0x00600001, 0x22d00229, 0x00aa0881, 0x00000000 },
+   { 0x00600001, 0x22f00229, 0x00aa0889, 0x00000000 },
+   { 0x00600001, 0x23100229, 0x00aa08a1, 0x00000000 },
+   { 0x00600001, 0x23300229, 0x00aa08a9, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00200001, 0x202001a6, 0x004500a0, 0x00000000 },
+   { 0x00000001, 0x20280062, 0x00000000, 0x0007000f },
+   { 0x00000005, 0x24000c20, 0x000000b8, 0x00ffffff },
+   { 0x04000010, 0x20000c04, 0x00000400, 0x00ffffff },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x00000056 },
+   { 0x04600031, 0x27000cc1, 0x00000020, 0x02498007 },
+   { 0x0000040c, 0x21043da1, 0x000000a2, 0x00010001 },
+   { 0x00000801, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x04600031, 0x28000cc1, 0x00000020, 0x02298008 },
+   { 0x00200001, 0x210001a1, 0x004500a0, 0x00000000 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0007000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00000001, 0x26020228, 0x000000ba, 0x00000000 },
+   { 0x00610001, 0x24400129, 0x020000b8, 0x00000000 },
+   { 0x00710001, 0x24400169, 0x02000000, 0x00000000 },
+   { 0x00000001, 0x24600061, 0x00000000, 0x00040001 },
+   { 0x00000001, 0x24640061, 0x00000000, 0x00400010 },
+   { 0x00000001, 0x24680061, 0x00000000, 0x04000100 },
+   { 0x00000001, 0x246c0061, 0x00000000, 0x40001000 },
+   { 0x00000001, 0x26020128, 0x00000440, 0x00000000 },
+   { 0x00910001, 0x41400231, 0x02b10700, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000440, 0x008d0460 },
+   { 0x00710001, 0x42400231, 0x02ae0800, 0x00000000 },
+   { 0x00710001, 0x43400231, 0x02ae0801, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000442, 0x00000000 },
+   { 0x00910001, 0x41600231, 0x02b10710, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000444, 0x00000000 },
+   { 0x00910001, 0x41800231, 0x02b10720, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000444, 0x008d0460 },
+   { 0x00710001, 0x42500231, 0x02ae0810, 0x00000000 },
+   { 0x00710001, 0x43500231, 0x02ae0811, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000446, 0x00000000 },
+   { 0x00910001, 0x41a00231, 0x02b10730, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000448, 0x00000000 },
+   { 0x00910001, 0x41c00231, 0x02b10740, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000448, 0x008d0460 },
+   { 0x00710001, 0x42600231, 0x02ae0820, 0x00000000 },
+   { 0x00710001, 0x43600231, 0x02ae0821, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044a, 0x00000000 },
+   { 0x00910001, 0x41e00231, 0x02b10750, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044c, 0x00000000 },
+   { 0x00910001, 0x42000231, 0x02b10760, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x0200044c, 0x008d0460 },
+   { 0x00710001, 0x42700231, 0x02ae0830, 0x00000000 },
+   { 0x00710001, 0x43700231, 0x02ae0831, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044e, 0x00000000 },
+   { 0x00910001, 0x42200231, 0x02b10770, 0x00000000 },
+   { 0x00800001, 0x20400232, 0x00d20140, 0x00000000 },
+   { 0x00800001, 0x20500232, 0x00d20160, 0x00000000 },
+   { 0x00800001, 0x20600232, 0x00d20180, 0x00000000 },
+   { 0x00800001, 0x20700232, 0x00d201a0, 0x00000000 },
+   { 0x00800001, 0x20800232, 0x00d201c0, 0x00000000 },
+   { 0x00800001, 0x20900232, 0x00d201e0, 0x00000000 },
+   { 0x00800001, 0x20a00232, 0x00d20200, 0x00000000 },
+   { 0x00800001, 0x20b00232, 0x00d20220, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x0a094007 },
+   { 0x00200001, 0x210001a5, 0x004500a0, 0x00000000 },
+   { 0x0000000c, 0x21043ca5, 0x00000104, 0x00010001 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00800001, 0x40400232, 0x00d20240, 0x00000000 },
+   { 0x00800001, 0x40410232, 0x00d20340, 0x00000000 },
+   { 0x00800001, 0x40600232, 0x00d20260, 0x00000000 },
+   { 0x00800001, 0x40610232, 0x00d20360, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x06094008 },
+   { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
+   { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
+   { 0x00000041, 0x24407fbd, 0x000000bc, 0x41800000 },
+   { 0x00000040, 0x20a477bd, 0x00000440, 0x000000a4 },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x0000000e },
+   { 0x00010220, 0x34001c00, 0x02001400, 0xfffffede },
+   { 0x00000001, 0x20a001ad, 0x0000008a, 0x00000000 },
+   { 0x00000040, 0x20a23dad, 0x000000a2, 0x00080008 },
+   { 0x00000001, 0x20a403bd, 0x00000094, 0x00000000 },
+   { 0x00000041, 0x24407fbd, 0x00000038, 0x41000000 },
+   { 0x00000040, 0x20a877bd, 0x00000440, 0x000000a8 },
+   { 0x00000220, 0x34001c00, 0x00001400, 0xfffffed2 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
diff --git a/i965_drv_video/shaders/post_processing/nv12_dndi_nv12.g4b.gen5 b/i965_drv_video/shaders/post_processing/nv12_dndi_nv12.g4b.gen5
index 1f60f3f..6c0474d 100644
--- a/i965_drv_video/shaders/post_processing/nv12_dndi_nv12.g4b.gen5
+++ b/i965_drv_video/shaders/post_processing/nv12_dndi_nv12.g4b.gen5
@@ -73,7 +73,7 @@
    { 0x01600031, 0x20000c04, 0x508d0000, 0x04082008 },
    { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
    { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
-   { 0x05000010, 0x2000358c, 0x02210400, 0x00000084 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
    { 0x00010220, 0x34001c00, 0x00001400, 0x00000008 },
    { 0x00010220, 0x34001c00, 0x02001400, 0xffffff70 },
    { 0x00000001, 0x20a001ad, 0x0000008a, 0x00000000 },
diff --git a/i965_drv_video/shaders/post_processing/nv12_dndi_nv12.g6b b/i965_drv_video/shaders/post_processing/nv12_dndi_nv12.g6b
new file mode 100644
index 0000000..cb99eff
--- /dev/null
+++ b/i965_drv_video/shaders/post_processing/nv12_dndi_nv12.g6b
@@ -0,0 +1,159 @@
+   { 0x00600001, 0x20e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000021, 0x008d0000, 0x00000000 },
+   { 0x00000441, 0x20842e2d, 0x000000b7, 0x00100010 },
+   { 0x00000c01, 0x2086022d, 0x000000bb, 0x00000000 },
+   { 0x00000801, 0x208a01ad, 0x000000a0, 0x00000000 },
+   { 0x00200001, 0x209403bd, 0x006600a4, 0x00000000 },
+   { 0x00000040, 0x208435ad, 0x00000084, 0x000000a0 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00000001, 0x204801aa, 0x000000a0, 0x00000000 },
+   { 0x00000001, 0x205801aa, 0x000000a2, 0x00000000 },
+   { 0x02600031, 0x24400cc1, 0x00000020, 0x04cb8004 },
+   { 0x00800001, 0x21400229, 0x00b10440, 0x00000000 },
+   { 0x00800001, 0x21600229, 0x00b10450, 0x00000000 },
+   { 0x00800001, 0x21800229, 0x00b10460, 0x00000000 },
+   { 0x00800001, 0x21a00229, 0x00b10470, 0x00000000 },
+   { 0x00600001, 0x22400229, 0x00ae0481, 0x00000000 },
+   { 0x00600001, 0x23400229, 0x00ae0480, 0x00000000 },
+   { 0x00600001, 0x22500229, 0x00ae0491, 0x00000000 },
+   { 0x00600001, 0x23500229, 0x00ae0490, 0x00000000 },
+   { 0x00600001, 0x22600229, 0x00ae04a1, 0x00000000 },
+   { 0x00600001, 0x23600229, 0x00ae04a0, 0x00000000 },
+   { 0x00600001, 0x22700229, 0x00ae04b1, 0x00000000 },
+   { 0x00600001, 0x23700229, 0x00ae04b0, 0x00000000 },
+   { 0x00800001, 0x21c00229, 0x00b104c0, 0x00000000 },
+   { 0x00800001, 0x21e00229, 0x00b104d0, 0x00000000 },
+   { 0x00800001, 0x22000229, 0x00b104e0, 0x00000000 },
+   { 0x00800001, 0x22200229, 0x00b104f0, 0x00000000 },
+   { 0x00600001, 0x22800229, 0x00ae0501, 0x00000000 },
+   { 0x00600001, 0x23800229, 0x00ae0500, 0x00000000 },
+   { 0x00600001, 0x22900229, 0x00ae0511, 0x00000000 },
+   { 0x00600001, 0x23900229, 0x00ae0510, 0x00000000 },
+   { 0x00600001, 0x22a00229, 0x00ae0521, 0x00000000 },
+   { 0x00600001, 0x23a00229, 0x00ae0520, 0x00000000 },
+   { 0x00600001, 0x22b00229, 0x00ae0531, 0x00000000 },
+   { 0x00600001, 0x23b00229, 0x00ae0530, 0x00000000 },
+   { 0x00000008, 0x21003da1, 0x000000a0, 0x00010001 },
+   { 0x00000001, 0x210401a1, 0x000000a2, 0x00000000 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x00030007 },
+   { 0x00600001, 0x21600022, 0x008d0100, 0x00000000 },
+   { 0x00600001, 0x21800022, 0x008d0540, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000160, 0x04094014 },
+   { 0x00200008, 0x21003da1, 0x004500a0, 0x00020002 },
+   { 0x00000040, 0x21002421, 0x00000100, 0x00000034 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x00000003 },
+   { 0x00600001, 0x21a00022, 0x008d0100, 0x00000000 },
+   { 0x00000001, 0x21c00022, 0x00000560, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x000001a0, 0x04094014 },
+   { 0x00400040, 0x22083e28, 0x00690024, 0x07000700 },
+   { 0x01000010, 0x20003e2c, 0x0000003b, 0x00010001 },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x0000000a },
+   { 0x00400001, 0x20400022, 0x00690580, 0x00000000 },
+   { 0x00400001, 0x20500022, 0x006904d0, 0x00000000 },
+   { 0x00400001, 0x20600022, 0x00690590, 0x00000000 },
+   { 0x00400001, 0x20700022, 0x006904f0, 0x00000000 },
+   { 0x00000220, 0x34001c00, 0x00001400, 0x00000008 },
+   { 0x00400001, 0x20400022, 0x006904c0, 0x00000000 },
+   { 0x00400001, 0x20500022, 0x00690580, 0x00000000 },
+   { 0x00400001, 0x20600022, 0x006904e0, 0x00000000 },
+   { 0x00400001, 0x20700022, 0x00690590, 0x00000000 },
+   { 0x00200001, 0x210001a1, 0x004500a0, 0x00000000 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x06094007 },
+   { 0x00200040, 0x210035a5, 0x004500a0, 0x00450074 },
+   { 0x0000000c, 0x21043ca5, 0x00000104, 0x00010001 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0001000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x04600031, 0x28000cc1, 0x00000020, 0x02198002 },
+   { 0x00200001, 0x210001a1, 0x004500a0, 0x00000000 },
+   { 0x0000000c, 0x21043ca5, 0x00000104, 0x00010001 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0001000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00600001, 0x20400022, 0x008d0800, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x04094008 },
+   { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
+   { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x00000008 },
+   { 0x00010220, 0x34001c00, 0x02001400, 0xffffff70 },
+   { 0x00000001, 0x20a001ad, 0x0000008a, 0x00000000 },
+   { 0x00000040, 0x20a23dad, 0x000000a2, 0x00080008 },
+   { 0x00000220, 0x34001c00, 0x00001400, 0xffffff6a },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
diff --git a/i965_drv_video/shaders/post_processing/nv12_load_save_nv12.g4b.gen5 b/i965_drv_video/shaders/post_processing/nv12_load_save_nv12.g4b.gen5
index 9802ff2..d511d4f 100644
--- a/i965_drv_video/shaders/post_processing/nv12_load_save_nv12.g4b.gen5
+++ b/i965_drv_video/shaders/post_processing/nv12_load_save_nv12.g4b.gen5
@@ -39,7 +39,7 @@
    { 0x00000001, 0x21080061, 0x00000000, 0x0007000f },
    { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
    { 0x00000001, 0x26020228, 0x000000ba, 0x00000000 },
-   { 0x00610001, 0x24400129, 0x028d00b8, 0x00000000 },
+   { 0x00610001, 0x24400129, 0x020000b8, 0x00000000 },
    { 0x00710001, 0x24400169, 0x02000000, 0x00000000 },
    { 0x00000001, 0x24600061, 0x00000000, 0x00040001 },
    { 0x00000001, 0x24640061, 0x00000000, 0x00400010 },
@@ -93,7 +93,7 @@
    { 0x01600031, 0x20000c04, 0x508d0000, 0x06082008 },
    { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
    { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
-   { 0x05000010, 0x2000358c, 0x02210400, 0x00000084 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
    { 0x00010220, 0x34001c00, 0x00001400, 0x00000008 },
    { 0x00010220, 0x34001c00, 0x02001400, 0xffffff48 },
    { 0x00000001, 0x20a001ad, 0x0000008a, 0x00000000 },
diff --git a/i965_drv_video/shaders/post_processing/nv12_load_save_nv12.g6b b/i965_drv_video/shaders/post_processing/nv12_load_save_nv12.g6b
new file mode 100644
index 0000000..6e76bd9
--- /dev/null
+++ b/i965_drv_video/shaders/post_processing/nv12_load_save_nv12.g6b
@@ -0,0 +1,179 @@
+   { 0x00600001, 0x20e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000021, 0x008d0000, 0x00000000 },
+   { 0x00000441, 0x20842e2d, 0x000000b7, 0x00100010 },
+   { 0x00000c01, 0x2086022d, 0x000000bb, 0x00000000 },
+   { 0x00000801, 0x208a01ad, 0x000000a0, 0x00000000 },
+   { 0x00200001, 0x209403bd, 0x006600a4, 0x00000000 },
+   { 0x00000040, 0x208435ad, 0x00000084, 0x000000a0 },
+   { 0x00200040, 0x210035a5, 0x004500a0, 0x00450074 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0007000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x04600031, 0x27000cc1, 0x00000020, 0x02498001 },
+   { 0x0000000c, 0x21043ca5, 0x00000104, 0x00010001 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20400022, 0x008d0100, 0x00000000 },
+   { 0x04600031, 0x28000cc1, 0x00000040, 0x02298002 },
+   { 0x00800001, 0x22200229, 0x00b10770, 0x00000000 },
+   { 0x00800001, 0x22000229, 0x00b10760, 0x00000000 },
+   { 0x00800001, 0x21e00229, 0x00b10750, 0x00000000 },
+   { 0x00800001, 0x21c00229, 0x00b10740, 0x00000000 },
+   { 0x00800001, 0x21a00229, 0x00b10730, 0x00000000 },
+   { 0x00800001, 0x21800229, 0x00b10720, 0x00000000 },
+   { 0x00800001, 0x21600229, 0x00b10710, 0x00000000 },
+   { 0x00800001, 0x21400229, 0x00b10700, 0x00000000 },
+   { 0x00800001, 0x22600229, 0x00d20820, 0x00000000 },
+   { 0x00800001, 0x23600229, 0x00d20821, 0x00000000 },
+   { 0x00800001, 0x22400229, 0x00d20800, 0x00000000 },
+   { 0x00800001, 0x23400229, 0x00d20801, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00200001, 0x202001a6, 0x004500a0, 0x00000000 },
+   { 0x00000001, 0x20280062, 0x00000000, 0x0007000f },
+   { 0x00000005, 0x24000c20, 0x000000b8, 0x00ffffff },
+   { 0x04000010, 0x20000c04, 0x00000400, 0x00ffffff },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x00000056 },
+   { 0x04600031, 0x27000cc1, 0x00000020, 0x02498007 },
+   { 0x0000040c, 0x21043da1, 0x000000a2, 0x00010001 },
+   { 0x00000801, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x04600031, 0x28000cc1, 0x00000020, 0x02298008 },
+   { 0x00200001, 0x210001a1, 0x004500a0, 0x00000000 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0007000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00000001, 0x26020228, 0x000000ba, 0x00000000 },
+   { 0x00610001, 0x24400129, 0x020000b8, 0x00000000 },
+   { 0x00710001, 0x24400169, 0x02000000, 0x00000000 },
+   { 0x00000001, 0x24600061, 0x00000000, 0x00040001 },
+   { 0x00000001, 0x24640061, 0x00000000, 0x00400010 },
+   { 0x00000001, 0x24680061, 0x00000000, 0x04000100 },
+   { 0x00000001, 0x246c0061, 0x00000000, 0x40001000 },
+   { 0x00000001, 0x26020128, 0x00000440, 0x00000000 },
+   { 0x00910001, 0x41400231, 0x02b10700, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000440, 0x008d0460 },
+   { 0x00710001, 0x42400231, 0x02ae0800, 0x00000000 },
+   { 0x00710001, 0x43400231, 0x02ae0801, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000442, 0x00000000 },
+   { 0x00910001, 0x41600231, 0x02b10710, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000444, 0x00000000 },
+   { 0x00910001, 0x41800231, 0x02b10720, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000444, 0x008d0460 },
+   { 0x00710001, 0x42500231, 0x02ae0810, 0x00000000 },
+   { 0x00710001, 0x43500231, 0x02ae0811, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000446, 0x00000000 },
+   { 0x00910001, 0x41a00231, 0x02b10730, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000448, 0x00000000 },
+   { 0x00910001, 0x41c00231, 0x02b10740, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000448, 0x008d0460 },
+   { 0x00710001, 0x42600231, 0x02ae0820, 0x00000000 },
+   { 0x00710001, 0x43600231, 0x02ae0821, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044a, 0x00000000 },
+   { 0x00910001, 0x41e00231, 0x02b10750, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044c, 0x00000000 },
+   { 0x00910001, 0x42000231, 0x02b10760, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x0200044c, 0x008d0460 },
+   { 0x00710001, 0x42700231, 0x02ae0830, 0x00000000 },
+   { 0x00710001, 0x43700231, 0x02ae0831, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044e, 0x00000000 },
+   { 0x00910001, 0x42200231, 0x02b10770, 0x00000000 },
+   { 0x00800001, 0x20400232, 0x00d20140, 0x00000000 },
+   { 0x00800001, 0x20500232, 0x00d20160, 0x00000000 },
+   { 0x00800001, 0x20600232, 0x00d20180, 0x00000000 },
+   { 0x00800001, 0x20700232, 0x00d201a0, 0x00000000 },
+   { 0x00800001, 0x20800232, 0x00d201c0, 0x00000000 },
+   { 0x00800001, 0x20900232, 0x00d201e0, 0x00000000 },
+   { 0x00800001, 0x20a00232, 0x00d20200, 0x00000000 },
+   { 0x00800001, 0x20b00232, 0x00d20220, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x0a094007 },
+   { 0x00200001, 0x210001a5, 0x004500a0, 0x00000000 },
+   { 0x0000000c, 0x21043ca5, 0x00000104, 0x00010001 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00800001, 0x40400232, 0x00d20240, 0x00000000 },
+   { 0x00800001, 0x40410232, 0x00d20340, 0x00000000 },
+   { 0x00800001, 0x40600232, 0x00d20260, 0x00000000 },
+   { 0x00800001, 0x40610232, 0x00d20360, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x06094008 },
+   { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
+   { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x00000008 },
+   { 0x00010220, 0x34001c00, 0x02001400, 0xffffff48 },
+   { 0x00000001, 0x20a001ad, 0x0000008a, 0x00000000 },
+   { 0x00000040, 0x20a23dad, 0x000000a2, 0x00080008 },
+   { 0x00000220, 0x34001c00, 0x00001400, 0xffffff42 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
diff --git a/i965_drv_video/shaders/post_processing/nv12_scaling_nv12.g4b.gen5 b/i965_drv_video/shaders/post_processing/nv12_scaling_nv12.g4b.gen5
index 6e99720..476b441 100644
--- a/i965_drv_video/shaders/post_processing/nv12_scaling_nv12.g4b.gen5
+++ b/i965_drv_video/shaders/post_processing/nv12_scaling_nv12.g4b.gen5
@@ -150,7 +150,7 @@
    { 0x00000001, 0x21080061, 0x00000000, 0x0007000f },
    { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
    { 0x00000001, 0x26020228, 0x000000ba, 0x00000000 },
-   { 0x00610001, 0x24400129, 0x028d00b8, 0x00000000 },
+   { 0x00610001, 0x24400129, 0x020000b8, 0x00000000 },
    { 0x00710001, 0x24400169, 0x02000000, 0x00000000 },
    { 0x00000001, 0x24600061, 0x00000000, 0x00040001 },
    { 0x00000001, 0x24640061, 0x00000000, 0x00400010 },
@@ -204,7 +204,7 @@
    { 0x01600031, 0x20000c04, 0x508d0000, 0x06082008 },
    { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
    { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
-   { 0x05000010, 0x2000358c, 0x02210400, 0x00000084 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
    { 0x00000041, 0x24407fbd, 0x000000bc, 0x41800000 },
    { 0x00000040, 0x20a477bd, 0x00000440, 0x000000a4 },
    { 0x00010220, 0x34001c00, 0x00001400, 0x0000000e },
diff --git a/i965_drv_video/shaders/post_processing/nv12_scaling_nv12.g6b b/i965_drv_video/shaders/post_processing/nv12_scaling_nv12.g6b
new file mode 100644
index 0000000..4537832
--- /dev/null
+++ b/i965_drv_video/shaders/post_processing/nv12_scaling_nv12.g6b
@@ -0,0 +1,295 @@
+   { 0x00600001, 0x20e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x22e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x23e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x24e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x25e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x26e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x27e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x28e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29000061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29200061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29400061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29600061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29800061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29a00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29c00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x29e00061, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21000021, 0x008d0000, 0x00000000 },
+   { 0x00000441, 0x20842e2d, 0x000000b7, 0x00100010 },
+   { 0x00000c01, 0x2086022d, 0x000000bb, 0x00000000 },
+   { 0x00000801, 0x208a01ad, 0x000000a0, 0x00000000 },
+   { 0x00200001, 0x209403bd, 0x006600a4, 0x00000000 },
+   { 0x00000040, 0x208435ad, 0x00000084, 0x000000a0 },
+   { 0x00400001, 0x254002fd, 0x00000000, 0x48403000 },
+   { 0x00400001, 0x255002fd, 0x00000000, 0x5c585450 },
+   { 0x00600040, 0x25607fbd, 0x008d0540, 0x41000000 },
+   { 0x00200401, 0x21000061, 0x00000000, 0x00000000 },
+   { 0x00000801, 0x21080061, 0x00000000, 0x00000000 },
+   { 0x00800001, 0x208003be, 0x000000a8, 0x00000000 },
+   { 0x00800001, 0x258003bd, 0x000000a8, 0x00000000 },
+   { 0x00800001, 0x240003bc, 0x000000a4, 0x00000000 },
+   { 0x00800048, 0x204077be, 0x000000bc, 0x008d0540 },
+   { 0x00000401, 0x257003fd, 0x00000000, 0x437f0000 },
+   { 0x00000801, 0x257c03fd, 0x00000000, 0x3f000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x21400229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x22400229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x23400229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x21600229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x22600229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x23600229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x21800229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x22800229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x23800229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x21a00229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x22a00229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x23a00229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x21c00229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x22c00229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x23c00229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x21e00229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x22e00229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x23e00229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x22000229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x23000229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x24000229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x02800031, 0x27001cc9, 0x00000020, 0x0a8a0101 },
+   { 0x02800031, 0x28001cc9, 0x00000020, 0x0a8a0202 },
+   { 0x00800040, 0x208077be, 0x008d0580, 0x00000038 },
+   { 0x00800040, 0x258077bd, 0x008d0580, 0x00000038 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0700 },
+   { 0x00800001, 0x27000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0800 },
+   { 0x00800001, 0x28000381, 0x008d0400, 0x00000000 },
+   { 0x00800059, 0x240077bc, 0x00000570, 0x008d0840 },
+   { 0x00800001, 0x28400381, 0x008d0400, 0x00000000 },
+   { 0x00800001, 0x22200229, 0x00cf0700, 0x00000000 },
+   { 0x00800001, 0x23200229, 0x00cf0800, 0x00000000 },
+   { 0x00800001, 0x24200229, 0x00cf0840, 0x00000000 },
+   { 0x00600001, 0x22400129, 0x00ae0240, 0x00000000 },
+   { 0x00600001, 0x23400129, 0x00ae0340, 0x00000000 },
+   { 0x00600001, 0x22500129, 0x00ae0280, 0x00000000 },
+   { 0x00600001, 0x23500129, 0x00ae0380, 0x00000000 },
+   { 0x00600001, 0x22600129, 0x00ae02c0, 0x00000000 },
+   { 0x00600001, 0x23600129, 0x00ae03c0, 0x00000000 },
+   { 0x00600001, 0x22700129, 0x00ae0300, 0x00000000 },
+   { 0x00600001, 0x23700129, 0x00ae0400, 0x00000000 },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00200001, 0x202001a6, 0x004500a0, 0x00000000 },
+   { 0x00000001, 0x20280062, 0x00000000, 0x0007000f },
+   { 0x00000005, 0x24000c20, 0x000000b8, 0x00ffffff },
+   { 0x04000010, 0x20000c04, 0x00000400, 0x00ffffff },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x00000056 },
+   { 0x04600031, 0x27000cc1, 0x00000020, 0x02498007 },
+   { 0x0000040c, 0x21043da1, 0x000000a2, 0x00010001 },
+   { 0x00000801, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x04600031, 0x28000cc1, 0x00000020, 0x02298008 },
+   { 0x00200001, 0x210001a1, 0x004500a0, 0x00000000 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0007000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00000001, 0x26020228, 0x000000ba, 0x00000000 },
+   { 0x00610001, 0x24400129, 0x020000b8, 0x00000000 },
+   { 0x00710001, 0x24400169, 0x02000000, 0x00000000 },
+   { 0x00000001, 0x24600061, 0x00000000, 0x00040001 },
+   { 0x00000001, 0x24640061, 0x00000000, 0x00400010 },
+   { 0x00000001, 0x24680061, 0x00000000, 0x04000100 },
+   { 0x00000001, 0x246c0061, 0x00000000, 0x40001000 },
+   { 0x00000001, 0x26020128, 0x00000440, 0x00000000 },
+   { 0x00910001, 0x41400231, 0x02b10700, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000440, 0x008d0460 },
+   { 0x00710001, 0x42400231, 0x02ae0800, 0x00000000 },
+   { 0x00710001, 0x43400231, 0x02ae0801, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000442, 0x00000000 },
+   { 0x00910001, 0x41600231, 0x02b10710, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000444, 0x00000000 },
+   { 0x00910001, 0x41800231, 0x02b10720, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000444, 0x008d0460 },
+   { 0x00710001, 0x42500231, 0x02ae0810, 0x00000000 },
+   { 0x00710001, 0x43500231, 0x02ae0811, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000446, 0x00000000 },
+   { 0x00910001, 0x41a00231, 0x02b10730, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x00000448, 0x00000000 },
+   { 0x00910001, 0x41c00231, 0x02b10740, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x02000448, 0x008d0460 },
+   { 0x00710001, 0x42600231, 0x02ae0820, 0x00000000 },
+   { 0x00710001, 0x43600231, 0x02ae0821, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044a, 0x00000000 },
+   { 0x00910001, 0x41e00231, 0x02b10750, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044c, 0x00000000 },
+   { 0x00910001, 0x42000231, 0x02b10760, 0x00000000 },
+   { 0x02600005, 0x2000252c, 0x0200044c, 0x008d0460 },
+   { 0x00710001, 0x42700231, 0x02ae0830, 0x00000000 },
+   { 0x00710001, 0x43700231, 0x02ae0831, 0x00000000 },
+   { 0x00000001, 0x26020128, 0x0000044e, 0x00000000 },
+   { 0x00910001, 0x42200231, 0x02b10770, 0x00000000 },
+   { 0x00800001, 0x20400232, 0x00d20140, 0x00000000 },
+   { 0x00800001, 0x20500232, 0x00d20160, 0x00000000 },
+   { 0x00800001, 0x20600232, 0x00d20180, 0x00000000 },
+   { 0x00800001, 0x20700232, 0x00d201a0, 0x00000000 },
+   { 0x00800001, 0x20800232, 0x00d201c0, 0x00000000 },
+   { 0x00800001, 0x20900232, 0x00d201e0, 0x00000000 },
+   { 0x00800001, 0x20a00232, 0x00d20200, 0x00000000 },
+   { 0x00800001, 0x20b00232, 0x00d20220, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x0a094007 },
+   { 0x00200001, 0x210001a5, 0x004500a0, 0x00000000 },
+   { 0x0000000c, 0x21043ca5, 0x00000104, 0x00010001 },
+   { 0x00000001, 0x21080061, 0x00000000, 0x0003000f },
+   { 0x00600001, 0x20200022, 0x008d0100, 0x00000000 },
+   { 0x00800001, 0x40400232, 0x00d20240, 0x00000000 },
+   { 0x00800001, 0x40410232, 0x00d20340, 0x00000000 },
+   { 0x00800001, 0x40600232, 0x00d20260, 0x00000000 },
+   { 0x00800001, 0x40610232, 0x00d20360, 0x00000000 },
+   { 0x05600031, 0x20000cc4, 0x00000020, 0x06094008 },
+   { 0x01000040, 0x20863dad, 0x00000086, 0xffffffff },
+   { 0x00000040, 0x20a03dad, 0x000000a0, 0x00100010 },
+   { 0x05000010, 0x200035ac, 0x020000a0, 0x00000084 },
+   { 0x00000041, 0x24407fbd, 0x000000bc, 0x41800000 },
+   { 0x00000040, 0x20a477bd, 0x00000440, 0x000000a4 },
+   { 0x00010220, 0x34001c00, 0x00001400, 0x0000000e },
+   { 0x00010220, 0x34001c00, 0x02001400, 0xfffffe66 },
+   { 0x00000001, 0x20a001ad, 0x0000008a, 0x00000000 },
+   { 0x00000040, 0x20a23dad, 0x000000a2, 0x00080008 },
+   { 0x00000001, 0x20a403bd, 0x00000094, 0x00000000 },
+   { 0x00000041, 0x24407fbd, 0x00000038, 0x41000000 },
+   { 0x00000040, 0x20a877bd, 0x00000440, 0x000000a8 },
+   { 0x00000220, 0x34001c00, 0x00001400, 0xfffffe5a },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
+   { 0x00600001, 0x21e00022, 0x008d0000, 0x00000000 },
+   { 0x07000031, 0x20001cc4, 0x000001e0, 0x82000010 },
